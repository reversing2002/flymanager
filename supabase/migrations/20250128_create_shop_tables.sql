-- Drop existing tables and policies
DROP TRIGGER IF EXISTS update_products_updated_at ON products;
DROP TRIGGER IF EXISTS update_product_items_updated_at ON product_items;
DROP FUNCTION IF EXISTS update_updated_at_column();

DROP POLICY IF EXISTS "Products are viewable by everyone" ON products;
DROP POLICY IF EXISTS "Products are editable by admins only" ON products;
DROP POLICY IF EXISTS "Product items are viewable by everyone" ON product_items;
DROP POLICY IF EXISTS "Product items are editable by admins only" ON product_items;

DROP TABLE IF EXISTS product_items;
DROP TABLE IF EXISTS products;

-- Create products table
CREATE TABLE IF NOT EXISTS products (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    club_id UUID NOT NULL REFERENCES clubs(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    description TEXT,
    optional BOOLEAN DEFAULT false,
    type VARCHAR(50) NOT NULL CHECK (type IN ('product', 'pack')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Create product_items table for pack contents
CREATE TABLE IF NOT EXISTS product_items (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    product_id BIGINT REFERENCES products(id) ON DELETE CASCADE,
    pack_id BIGINT REFERENCES products(id) ON DELETE CASCADE,
    quantity INTEGER NOT NULL DEFAULT 1,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    CONSTRAINT product_items_product_pack_unique UNIQUE (product_id, pack_id)
);

-- Create function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = TIMEZONE('utc'::text, NOW());
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create triggers for updated_at
CREATE TRIGGER update_products_updated_at
    BEFORE UPDATE ON products
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_product_items_updated_at
    BEFORE UPDATE ON product_items
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Enable RLS
ALTER TABLE products ENABLE ROW LEVEL SECURITY;
ALTER TABLE product_items ENABLE ROW LEVEL SECURITY;

-- Add RLS policies for products
CREATE POLICY "Users can view their club's products"
    ON products FOR SELECT
    USING (
        auth.uid() IN (
            SELECT auth_id FROM users u
            INNER JOIN club_members cm ON cm.user_id = u.id
            WHERE cm.club_id = products.club_id
        )
    );

CREATE POLICY "Admins can update their club's products"
    ON products FOR UPDATE
    USING (
        auth.uid() IN (
            SELECT auth_id FROM users u
            INNER JOIN club_members cm ON cm.user_id = u.id
            WHERE cm.club_id = products.club_id
            AND has_any_group(auth.uid(), ARRAY['ADMIN'::text])
        )
    )
    WITH CHECK (
        auth.uid() IN (
            SELECT auth_id FROM users u
            INNER JOIN club_members cm ON cm.user_id = u.id
            WHERE cm.club_id = products.club_id
            AND has_any_group(auth.uid(), ARRAY['ADMIN'::text])
        )
    );

CREATE POLICY "Admins can insert their club's products"
    ON products FOR INSERT
    WITH CHECK (
        auth.uid() IN (
            SELECT auth_id FROM users u
            INNER JOIN club_members cm ON cm.user_id = u.id
            WHERE cm.club_id = products.club_id
            AND has_any_group(auth.uid(), ARRAY['ADMIN'::text])
        )
    );

CREATE POLICY "Admins can delete their club's products"
    ON products FOR DELETE
    USING (
        auth.uid() IN (
            SELECT auth_id FROM users u
            INNER JOIN club_members cm ON cm.user_id = u.id
            WHERE cm.club_id = products.club_id
            AND has_any_group(auth.uid(), ARRAY['ADMIN'::text])
        )
    );

-- Add RLS policies for product_items
CREATE POLICY "Users can view their club's product items"
    ON product_items FOR SELECT
    USING (
        EXISTS (
            SELECT 1 FROM products p
            WHERE (p.id = product_items.product_id OR p.id = product_items.pack_id)
            AND auth.uid() IN (
                SELECT auth_id FROM users u
                INNER JOIN club_members cm ON cm.user_id = u.id
                WHERE cm.club_id = p.club_id
            )
        )
    );

CREATE POLICY "Admins can update their club's product items"
    ON product_items FOR UPDATE
    USING (
        EXISTS (
            SELECT 1 FROM products p
            WHERE (p.id = product_items.product_id OR p.id = product_items.pack_id)
            AND auth.uid() IN (
                SELECT auth_id FROM users u
                INNER JOIN club_members cm ON cm.user_id = u.id
                WHERE cm.club_id = p.club_id
                AND has_any_group(auth.uid(), ARRAY['ADMIN'::text])
            )
        )
    )
    WITH CHECK (
        EXISTS (
            SELECT 1 FROM products p
            WHERE (p.id = product_items.product_id OR p.id = product_items.pack_id)
            AND auth.uid() IN (
                SELECT auth_id FROM users u
                INNER JOIN club_members cm ON cm.user_id = u.id
                WHERE cm.club_id = p.club_id
                AND has_any_group(auth.uid(), ARRAY['ADMIN'::text])
            )
        )
    );

CREATE POLICY "Admins can insert their club's product items"
    ON product_items FOR INSERT
    WITH CHECK (
        EXISTS (
            SELECT 1 FROM products p
            WHERE (p.id = product_items.product_id OR p.id = product_items.pack_id)
            AND auth.uid() IN (
                SELECT auth_id FROM users u
                INNER JOIN club_members cm ON cm.user_id = u.id
                WHERE cm.club_id = p.club_id
                AND has_any_group(auth.uid(), ARRAY['ADMIN'::text])
            )
        )
    );

CREATE POLICY "Admins can delete their club's product items"
    ON product_items FOR DELETE
    USING (
        EXISTS (
            SELECT 1 FROM products p
            WHERE (p.id = product_items.product_id OR p.id = product_items.pack_id)
            AND auth.uid() IN (
                SELECT auth_id FROM users u
                INNER JOIN club_members cm ON cm.user_id = u.id
                WHERE cm.club_id = p.club_id
                AND has_any_group(auth.uid(), ARRAY['ADMIN'::text])
            )
        )
    );
