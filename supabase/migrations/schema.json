{
    "tables": [
        {
            "name": "aircraft_remark_responses",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "remark_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "user_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "content",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                }
            ],
            "constraints": [
                "aircraft_remark_responses_pkey",
                "aircraft_remark_responses_remark_id_fkey",
                "aircraft_remark_responses_user_id_fkey",
                "2200_41037_1_not_null",
                "2200_41037_4_not_null"
            ]
        },
        {
            "name": "dismissed_announcements",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "user_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "announcement_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "dismissed_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                }
            ],
            "constraints": [
                "dismissed_announcements_announcement_id_fkey",
                "dismissed_announcements_pkey",
                "dismissed_announcements_user_id_announcement_id_key",
                "dismissed_announcements_user_id_fkey",
                "2200_56600_1_not_null",
                "2200_56600_2_not_null",
                "2200_56600_3_not_null"
            ]
        },
        {
            "name": "chat_room_members",
            "columns": [
                {
                    "name": "room_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "user_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "joined_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                }
            ],
            "constraints": [
                "chat_room_members_pkey",
                "chat_room_members_room_id_fkey",
                "chat_room_members_user_id_fkey",
                "2200_59868_1_not_null",
                "2200_59868_2_not_null"
            ]
        },
        {
            "name": "maintenance",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "aircraft_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "date",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "type",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "comments",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "hours_after_maintenance",
                    "type": "numeric",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "next_maintenance_date",
                    "type": "date",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "next_maintenance_hours",
                    "type": "integer",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "aircraft_hours_at_maintenance",
                    "type": "numeric",
                    "nullable": true,
                    "default_value": null
                }
            ],
            "constraints": [
                "maintenance_pkey",
                "2200_29139_1_not_null",
                "2200_29139_2_not_null",
                "2200_29139_3_not_null",
                "2200_29139_4_not_null"
            ]
        },
        {
            "name": "user_badges",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "user_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "title",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "description",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "image_url",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "awarded_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                }
            ],
            "constraints": [
                "user_badges_pkey",
                "2200_31473_1_not_null",
                "2200_31473_2_not_null",
                "2200_31473_3_not_null"
            ]
        },
        {
            "name": "instructor_invoices",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "instructor_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "start_date",
                    "type": "date",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "end_date",
                    "type": "date",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "amount",
                    "type": "numeric",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "status",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "invoice_number",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "payment_method",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "comments",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": "timezone('utc'::text, now())"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": "timezone('utc'::text, now())"
                },
                {
                    "name": "paid_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": null
                }
            ],
            "constraints": [
                "instructor_invoices_instructor_id_fkey",
                "instructor_invoices_invoice_number_key",
                "instructor_invoices_pkey",
                "instructor_invoices_status_check",
                "2200_85846_1_not_null",
                "2200_85846_2_not_null",
                "2200_85846_3_not_null",
                "2200_85846_4_not_null",
                "2200_85846_5_not_null",
                "2200_85846_6_not_null",
                "2200_85846_7_not_null",
                "2200_85846_10_not_null",
                "2200_85846_11_not_null"
            ]
        },
        {
            "name": "qualification_types",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "name",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "description",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "validity_period",
                    "type": "integer",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "requires_instructor_validation",
                    "type": "boolean",
                    "nullable": false,
                    "default_value": "false"
                },
                {
                    "name": "display_order",
                    "type": "integer",
                    "nullable": false,
                    "default_value": "0"
                },
                {
                    "name": "club_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "is_system",
                    "type": "boolean",
                    "nullable": false,
                    "default_value": "false"
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                }
            ],
            "constraints": [
                "qualification_types_club_id_fkey",
                "qualification_types_name_club_id_key",
                "qualification_types_pkey",
                "2200_103188_1_not_null",
                "2200_103188_2_not_null",
                "2200_103188_5_not_null",
                "2200_103188_6_not_null",
                "2200_103188_7_not_null",
                "2200_103188_8_not_null"
            ]
        },
        {
            "name": "pilot_qualifications",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "pilot_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "qualification_type_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "obtained_at",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": "now()"
                },
                {
                    "name": "expires_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "validated_by",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "validated_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                }
            ],
            "constraints": [
                "pilot_qualifications_pilot_id_fkey",
                "pilot_qualifications_pilot_id_qualification_type_id_key",
                "pilot_qualifications_pkey",
                "pilot_qualifications_qualification_type_id_fkey",
                "pilot_qualifications_validated_by_fkey",
                "2200_103208_1_not_null",
                "2200_103208_2_not_null",
                "2200_103208_3_not_null",
                "2200_103208_4_not_null"
            ]
        },
        {
            "name": "accounting_categories",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "name",
                    "type": "character varying",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "description",
                    "type": "character varying",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "is_default",
                    "type": "boolean",
                    "nullable": true,
                    "default_value": "false"
                },
                {
                    "name": "display_order",
                    "type": "integer",
                    "nullable": true,
                    "default_value": "0"
                },
                {
                    "name": "is_club_paid",
                    "type": "boolean",
                    "nullable": false,
                    "default_value": "false"
                },
                {
                    "name": "club_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "is_system",
                    "type": "boolean",
                    "nullable": false,
                    "default_value": "false"
                }
            ],
            "constraints": [
                "accounting_categories_club_id_fkey",
                "accounting_categories_name_club_key",
                "accounting_categories_pkey",
                "2200_83718_1_not_null",
                "2200_83718_2_not_null",
                "2200_83718_6_not_null",
                "2200_83718_8_not_null"
            ]
        },
        {
            "name": "account_transactions",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "user_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "type",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "amount",
                    "type": "numeric",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "method",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "status",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "stripe_payment_id",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "description",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "club_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                }
            ],
            "constraints": [
                "account_transactions_club_id_fkey",
                "account_transactions_method_check",
                "account_transactions_pkey",
                "account_transactions_status_check",
                "account_transactions_type_check",
                "account_transactions_user_id_fkey",
                "2200_38982_1_not_null",
                "2200_38982_2_not_null",
                "2200_38982_3_not_null",
                "2200_38982_4_not_null",
                "2200_38982_5_not_null",
                "2200_38982_6_not_null"
            ]
        },
        {
            "name": "availabilities",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "user_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "aircraft_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "start_time",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "end_time",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "is_recurring",
                    "type": "boolean",
                    "nullable": false,
                    "default_value": "false"
                },
                {
                    "name": "recurrence_pattern",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "recurrence_end_date",
                    "type": "date",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "reason",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": "now()"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": "now()"
                },
                {
                    "name": "club_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "slot_type",
                    "type": "USER-DEFINED",
                    "nullable": false,
                    "default_value": "'unavailability'::availability_slot_type"
                }
            ],
            "constraints": [
                "availabilities_aircraft_id_fkey",
                "availabilities_club_id_fkey",
                "availabilities_pkey",
                "availabilities_user_id_fkey",
                "availability_entity_check",
                "availability_recurrence_check",
                "availability_slot_type_check",
                "availability_time_check",
                "2200_98129_1_not_null",
                "2200_98129_4_not_null",
                "2200_98129_5_not_null",
                "2200_98129_6_not_null",
                "2200_98129_10_not_null",
                "2200_98129_11_not_null",
                "2200_98129_12_not_null",
                "2200_98129_13_not_null"
            ]
        },
        {
            "name": "license_types",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "name",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "description",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "category",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "validity_period",
                    "type": "integer",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "required_medical_class",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "display_order",
                    "type": "integer",
                    "nullable": false,
                    "default_value": "0"
                },
                {
                    "name": "club_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "is_system",
                    "type": "boolean",
                    "nullable": false,
                    "default_value": "false"
                },
                {
                    "name": "required_fields",
                    "type": "jsonb",
                    "nullable": false,
                    "default_value": "'[]'::jsonb"
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                }
            ],
            "constraints": [
                "license_types_club_id_check",
                "license_types_club_id_fkey",
                "license_types_name_club_id_key",
                "license_types_pkey",
                "2200_103466_1_not_null",
                "2200_103466_2_not_null",
                "2200_103466_4_not_null",
                "2200_103466_7_not_null",
                "2200_103466_9_not_null",
                "2200_103466_10_not_null"
            ]
        },
        {
            "name": "custom_flight_field_definitions",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "club_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "name",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "label",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "type",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "required",
                    "type": "boolean",
                    "nullable": true,
                    "default_value": "false"
                },
                {
                    "name": "options",
                    "type": "jsonb",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "min_value",
                    "type": "numeric",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "max_value",
                    "type": "numeric",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "step",
                    "type": "numeric",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "accepted_file_types",
                    "type": "ARRAY",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "display_order",
                    "type": "integer",
                    "nullable": false,
                    "default_value": "0"
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": "timezone('utc'::text, now())"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": "timezone('utc'::text, now())"
                }
            ],
            "constraints": [
                "custom_flight_field_definitions_club_id_fkey",
                "custom_flight_field_definitions_club_id_name_key",
                "custom_flight_field_definitions_pkey",
                "custom_flight_field_definitions_type_check",
                "2200_120810_1_not_null",
                "2200_120810_3_not_null",
                "2200_120810_4_not_null",
                "2200_120810_5_not_null",
                "2200_120810_12_not_null",
                "2200_120810_13_not_null",
                "2200_120810_14_not_null"
            ]
        },
        {
            "name": "custom_flight_field_values",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "flight_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "field_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "value",
                    "type": "jsonb",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": "timezone('utc'::text, now())"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": "timezone('utc'::text, now())"
                }
            ],
            "constraints": [
                "custom_flight_field_values_field_id_fkey",
                "custom_flight_field_values_flight_id_field_id_key",
                "custom_flight_field_values_flight_id_fkey",
                "custom_flight_field_values_pkey",
                "2200_120830_1_not_null",
                "2200_120830_5_not_null",
                "2200_120830_6_not_null"
            ]
        },
        {
            "name": "discovery_flight_features",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "club_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "description",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "display_order",
                    "type": "integer",
                    "nullable": false,
                    "default_value": "0"
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": "timezone('utc'::text, now())"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": "timezone('utc'::text, now())"
                }
            ],
            "constraints": [
                "discovery_flight_features_club_id_fkey",
                "discovery_flight_features_pkey",
                "2200_121104_1_not_null",
                "2200_121104_2_not_null",
                "2200_121104_3_not_null",
                "2200_121104_4_not_null",
                "2200_121104_5_not_null",
                "2200_121104_6_not_null"
            ]
        },
        {
            "name": "announcements",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "title",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "content",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "priority",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "created_by",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "club_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                }
            ],
            "constraints": [
                "announcements_club_id_fkey",
                "announcements_created_by_fkey",
                "announcements_pkey",
                "announcements_priority_check",
                "2200_40758_1_not_null",
                "2200_40758_2_not_null",
                "2200_40758_3_not_null",
                "2200_40758_4_not_null",
                "2200_40758_9_not_null"
            ]
        },
        {
            "name": "account_entry_types",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "code",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "name",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "description",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "is_credit",
                    "type": "boolean",
                    "nullable": false,
                    "default_value": "false"
                },
                {
                    "name": "is_system",
                    "type": "boolean",
                    "nullable": false,
                    "default_value": "false"
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "club_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                }
            ],
            "constraints": [
                "account_entry_types_club_id_fkey",
                "account_entry_types_code_club_key",
                "account_entry_types_pkey",
                "2200_77752_1_not_null",
                "2200_77752_2_not_null",
                "2200_77752_3_not_null",
                "2200_77752_5_not_null",
                "2200_77752_6_not_null"
            ]
        },
        {
            "name": "private_messages",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "content",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "sender_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "recipient_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "read_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": "now()"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": "now()"
                },
                {
                    "name": "file_type",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "file_url",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                }
            ],
            "constraints": [
                "private_messages_file_type_check",
                "private_messages_pkey",
                "private_messages_recipient_id_fkey",
                "private_messages_sender_id_fkey",
                "2200_69080_1_not_null",
                "2200_69080_2_not_null",
                "2200_69080_6_not_null",
                "2200_69080_7_not_null"
            ]
        },
        {
            "name": "club_members",
            "columns": [
                {
                    "name": "club_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "user_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "status",
                    "type": "text",
                    "nullable": true,
                    "default_value": "'ACTIVE'::text"
                },
                {
                    "name": "joined_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                }
            ],
            "constraints": [
                "club_members_club_id_fkey",
                "club_members_pkey",
                "club_members_user_id_fkey",
                "valid_member_status",
                "2200_44859_1_not_null",
                "2200_44859_2_not_null"
            ]
        },
        {
            "name": "clubs",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "name",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "code",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "address",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "phone",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "email",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "settings",
                    "type": "jsonb",
                    "nullable": true,
                    "default_value": "'{}'::jsonb"
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "latitude",
                    "type": "numeric",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "longitude",
                    "type": "numeric",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "night_flights_enabled",
                    "type": "boolean",
                    "nullable": false,
                    "default_value": "false"
                }
            ],
            "constraints": [
                "clubs_code_key",
                "clubs_pkey",
                "2200_44846_1_not_null",
                "2200_44846_2_not_null",
                "2200_44846_3_not_null",
                "2200_44846_12_not_null"
            ]
        },
        {
            "name": "pilot_licenses",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "user_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "license_type_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "number",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "authority",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "issued_at",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "expires_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "data",
                    "type": "jsonb",
                    "nullable": false,
                    "default_value": "'{}'::jsonb"
                },
                {
                    "name": "scan_id",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                }
            ],
            "constraints": [
                "pilot_licenses_license_type_id_fkey",
                "pilot_licenses_pkey",
                "pilot_licenses_user_id_fkey",
                "pilot_licenses_user_id_license_type_id_key",
                "2200_103577_1_not_null",
                "2200_103577_2_not_null",
                "2200_103577_3_not_null",
                "2200_103577_4_not_null",
                "2200_103577_5_not_null",
                "2200_103577_6_not_null",
                "2200_103577_8_not_null"
            ]
        },
        {
            "name": "user_groups",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "name",
                    "type": "character varying",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "description",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "club_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "is_system",
                    "type": "boolean",
                    "nullable": false,
                    "default_value": "false"
                },
                {
                    "name": "code",
                    "type": "character varying",
                    "nullable": true,
                    "default_value": null
                }
            ],
            "constraints": [
                "user_groups_club_id_fkey",
                "user_groups_pkey",
                "2200_70244_1_not_null",
                "2200_70244_2_not_null",
                "2200_70244_7_not_null"
            ]
        },
        {
            "name": "user_group_memberships",
            "columns": [
                {
                    "name": "user_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "group_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                }
            ],
            "constraints": [
                "user_group_memberships_group_id_fkey",
                "user_group_memberships_pkey",
                "user_group_memberships_user_id_fkey",
                "2200_70254_1_not_null",
                "2200_70254_2_not_null"
            ]
        },
        {
            "name": "aircraft_remarks",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "aircraft_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "user_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "content",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "status",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "image_url",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "video_url",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "document_url",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                }
            ],
            "constraints": [
                "aircraft_remarks_aircraft_id_fkey",
                "aircraft_remarks_pkey",
                "aircraft_remarks_status_check",
                "aircraft_remarks_user_id_fkey",
                "2200_41016_1_not_null",
                "2200_41016_4_not_null",
                "2200_41016_5_not_null"
            ]
        },
        {
            "name": "chat_rooms",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "name",
                    "type": "character varying",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "type",
                    "type": "character varying",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "description",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "club_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "creator_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                }
            ],
            "constraints": [
                "chat_rooms_club_id_fkey",
                "chat_rooms_creator_id_fkey",
                "chat_rooms_pkey",
                "chat_rooms_type_check",
                "2200_58470_1_not_null",
                "2200_58470_2_not_null",
                "2200_58470_3_not_null",
                "2200_58470_5_not_null",
                "2200_58470_6_not_null"
            ]
        },
        {
            "name": "chat_messages",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "room_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "user_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "content",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "image_url",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "video_url",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "file_type",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "file_url",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                }
            ],
            "constraints": [
                "chat_messages_file_type_check",
                "chat_messages_pkey",
                "chat_messages_room_id_fkey",
                "chat_messages_user_id_fkey",
                "2200_58491_1_not_null",
                "2200_58491_4_not_null"
            ]
        },
        {
            "name": "reservations",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "user_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "aircraft_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "flight_type_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "start_time",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "end_time",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "with_instructor",
                    "type": "boolean",
                    "nullable": true,
                    "default_value": "false"
                },
                {
                    "name": "instructor_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "status",
                    "type": "text",
                    "nullable": true,
                    "default_value": "'ACTIVE'::text"
                },
                {
                    "name": "comments",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "pilot_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "club_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                }
            ],
            "constraints": [
                "reservations_aircraft_id_fkey",
                "reservations_club_id_fkey",
                "reservations_flight_type_id_fkey",
                "reservations_instructor_id_fkey",
                "reservations_pilot_id_fkey",
                "reservations_pkey",
                "reservations_user_id_fkey",
                "2200_32887_1_not_null",
                "2200_32887_2_not_null",
                "2200_32887_3_not_null",
                "2200_32887_4_not_null",
                "2200_32887_5_not_null",
                "2200_32887_6_not_null",
                "2200_32887_13_not_null",
                "2200_32887_15_not_null"
            ]
        },
        {
            "name": "flight_types",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "name",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "description",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "requires_instructor",
                    "type": "boolean",
                    "nullable": true,
                    "default_value": "false"
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "display_order",
                    "type": "integer",
                    "nullable": false,
                    "default_value": "0"
                },
                {
                    "name": "is_default",
                    "type": "boolean",
                    "nullable": false,
                    "default_value": "false"
                },
                {
                    "name": "accounting_category_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "club_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "is_system",
                    "type": "boolean",
                    "nullable": false,
                    "default_value": "false"
                },
                {
                    "name": "code",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                }
            ],
            "constraints": [
                "flight_types_accounting_category_id_fkey",
                "flight_types_club_id_fkey",
                "flight_types_code_club_key",
                "flight_types_name_club_key",
                "flight_types_pkey",
                "2200_32875_1_not_null",
                "2200_32875_2_not_null",
                "2200_32875_8_not_null",
                "2200_32875_9_not_null",
                "2200_32875_12_not_null",
                "2200_32875_13_not_null"
            ]
        },
        {
            "name": "aircraft",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "name",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "type",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "registration",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "capacity",
                    "type": "integer",
                    "nullable": true,
                    "default_value": "1"
                },
                {
                    "name": "hourly_rate",
                    "type": "numeric",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "last_maintenance",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "hours_before_maintenance",
                    "type": "integer",
                    "nullable": true,
                    "default_value": "0"
                },
                {
                    "name": "status",
                    "type": "text",
                    "nullable": true,
                    "default_value": "'AVAILABLE'::text"
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "image_url",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "next_maintenance_date",
                    "type": "date",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "next_maintenance_hours",
                    "type": "integer",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "total_flight_hours",
                    "type": "numeric",
                    "nullable": true,
                    "default_value": "0"
                },
                {
                    "name": "total_cycles",
                    "type": "integer",
                    "nullable": true,
                    "default_value": "0"
                },
                {
                    "name": "club_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "last_hour_meter",
                    "type": "numeric",
                    "nullable": true,
                    "default_value": "0"
                },
                {
                    "name": "hour_format",
                    "type": "character varying",
                    "nullable": true,
                    "default_value": "'CLASSIC'::character varying"
                }
            ],
            "constraints": [
                "aircraft_club_id_fkey",
                "aircraft_hour_format_check",
                "aircraft_pkey",
                "aircraft_registration_key",
                "2200_32860_1_not_null",
                "2200_32860_2_not_null",
                "2200_32860_3_not_null",
                "2200_32860_4_not_null",
                "2200_32860_6_not_null",
                "2200_32860_18_not_null"
            ]
        },
        {
            "name": "users",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "first_name",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "last_name",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "email",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "phone",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "login",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "gender",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "birth_date",
                    "type": "date",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "image_url",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "address_1",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "city",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "zip_code",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "country",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "auth_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "instructor_rate",
                    "type": "numeric",
                    "nullable": true,
                    "default_value": "0"
                },
                {
                    "name": "instructor_fee",
                    "type": "numeric",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "default_mode",
                    "type": "USER-DEFINED",
                    "nullable": false,
                    "default_value": "'default-available'::user_default_mode"
                },
                {
                    "name": "instance_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "aud",
                    "type": "character varying",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "role",
                    "type": "character varying",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "email",
                    "type": "character varying",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "encrypted_password",
                    "type": "character varying",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "email_confirmed_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "invited_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "confirmation_token",
                    "type": "character varying",
                    "nullable": true,
                    "default_value": "''::character varying"
                },
                {
                    "name": "confirmation_sent_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "recovery_token",
                    "type": "character varying",
                    "nullable": true,
                    "default_value": "''::character varying"
                },
                {
                    "name": "recovery_sent_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "email_change_token_new",
                    "type": "character varying",
                    "nullable": true,
                    "default_value": "''::character varying"
                },
                {
                    "name": "email_change",
                    "type": "character varying",
                    "nullable": true,
                    "default_value": "''::character varying"
                },
                {
                    "name": "email_change_sent_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "last_sign_in_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "raw_app_meta_data",
                    "type": "jsonb",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "raw_user_meta_data",
                    "type": "jsonb",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "is_super_admin",
                    "type": "boolean",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "phone",
                    "type": "text",
                    "nullable": true,
                    "default_value": "NULL::character varying"
                },
                {
                    "name": "phone_confirmed_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "phone_change",
                    "type": "text",
                    "nullable": true,
                    "default_value": "''::text"
                },
                {
                    "name": "phone_change_token",
                    "type": "character varying",
                    "nullable": true,
                    "default_value": "''::character varying"
                },
                {
                    "name": "phone_change_sent_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "confirmed_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "email_change_token_current",
                    "type": "character varying",
                    "nullable": true,
                    "default_value": "''::character varying"
                },
                {
                    "name": "email_change_confirm_status",
                    "type": "smallint",
                    "nullable": true,
                    "default_value": "0"
                },
                {
                    "name": "banned_until",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "reauthentication_token",
                    "type": "character varying",
                    "nullable": true,
                    "default_value": "''::character varying"
                },
                {
                    "name": "reauthentication_sent_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "is_sso_user",
                    "type": "boolean",
                    "nullable": false,
                    "default_value": "false"
                },
                {
                    "name": "deleted_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "is_anonymous",
                    "type": "boolean",
                    "nullable": false,
                    "default_value": "false"
                },
                {
                    "name": "default_mode",
                    "type": "USER-DEFINED",
                    "nullable": false,
                    "default_value": "'default-available'::user_default_mode"
                }
            ],
            "constraints": [
                "users_email_key",
                "users_login_key",
                "users_pkey",
                "users_email_change_confirm_status_check",
                "users_phone_key",
                "users_pkey",
                "2200_32844_1_not_null",
                "2200_32844_2_not_null",
                "2200_32844_3_not_null",
                "2200_32844_4_not_null",
                "2200_32844_11_not_null",
                "2200_32844_31_not_null",
                "16488_16489_2_not_null",
                "16488_16489_33_not_null",
                "16488_16489_35_not_null",
                "16488_16489_36_not_null"
            ]
        },
        {
            "name": "daily_challenges",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "user_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "question_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "challenge_date",
                    "type": "date",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "status",
                    "type": "text",
                    "nullable": true,
                    "default_value": "'PENDING'::text"
                },
                {
                    "name": "points_earned",
                    "type": "integer",
                    "nullable": true,
                    "default_value": "0"
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "club_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                }
            ],
            "constraints": [
                "daily_challenges_club_id_fkey",
                "daily_challenges_pkey",
                "daily_challenges_question_id_fkey",
                "daily_challenges_status_check",
                "daily_challenges_user_id_challenge_date_key",
                "daily_challenges_user_id_fkey",
                "2200_33027_1_not_null",
                "2200_33027_2_not_null",
                "2200_33027_3_not_null",
                "2200_33027_4_not_null"
            ]
        },
        {
            "name": "user_progress",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "user_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "module_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "progress",
                    "type": "integer",
                    "nullable": true,
                    "default_value": "0"
                },
                {
                    "name": "points_earned",
                    "type": "integer",
                    "nullable": true,
                    "default_value": "0"
                },
                {
                    "name": "last_access",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                }
            ],
            "constraints": [
                "user_progress_module_id_fkey",
                "user_progress_pkey",
                "user_progress_user_id_fkey",
                "user_progress_user_id_module_id_key",
                "2200_33004_1_not_null",
                "2200_33004_2_not_null",
                "2200_33004_3_not_null"
            ]
        },
        {
            "name": "training_questions",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "module_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "question",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "choices",
                    "type": "jsonb",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "correct_answer",
                    "type": "integer",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "explanation",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "points",
                    "type": "integer",
                    "nullable": true,
                    "default_value": "10"
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                }
            ],
            "constraints": [
                "training_questions_module_id_fkey",
                "training_questions_pkey",
                "2200_32988_1_not_null",
                "2200_32988_2_not_null",
                "2200_32988_3_not_null",
                "2200_32988_4_not_null",
                "2200_32988_5_not_null"
            ]
        },
        {
            "name": "training_modules",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "title",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "description",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "level",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "category",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "points",
                    "type": "integer",
                    "nullable": true,
                    "default_value": "0"
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "club_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                }
            ],
            "constraints": [
                "training_modules_club_id_fkey",
                "training_modules_level_check",
                "training_modules_pkey",
                "2200_32976_1_not_null",
                "2200_32976_2_not_null",
                "2200_32976_5_not_null"
            ]
        },
        {
            "name": "account_entries",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "user_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "date",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "amount",
                    "type": "numeric",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "payment_method",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "description",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "is_validated",
                    "type": "boolean",
                    "nullable": true,
                    "default_value": "false"
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "assigned_to_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "flight_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "entry_type_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "is_club_paid",
                    "type": "boolean",
                    "nullable": true,
                    "default_value": "false"
                },
                {
                    "name": "club_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                }
            ],
            "constraints": [
                "account_entries_assigned_to_id_fkey",
                "account_entries_club_id_fkey",
                "account_entries_entry_type_id_fkey",
                "account_entries_flight_id_fkey",
                "account_entries_payment_method_check",
                "account_entries_pkey",
                "account_entries_user_id_fkey",
                "2200_32958_1_not_null",
                "2200_32958_2_not_null",
                "2200_32958_3_not_null",
                "2200_32958_5_not_null",
                "2200_32958_6_not_null",
                "2200_32958_15_not_null"
            ]
        },
        {
            "name": "flights",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "reservation_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "user_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "aircraft_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "flight_type_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "instructor_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "date",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "duration",
                    "type": "integer",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "destination",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "hourly_rate",
                    "type": "numeric",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "cost",
                    "type": "numeric",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "payment_method",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "is_validated",
                    "type": "boolean",
                    "nullable": true,
                    "default_value": "false"
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "instructor_fee",
                    "type": "numeric",
                    "nullable": true,
                    "default_value": "0"
                },
                {
                    "name": "club_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "start_hour_meter",
                    "type": "numeric",
                    "nullable": true,
                    "default_value": "0"
                },
                {
                    "name": "end_hour_meter",
                    "type": "numeric",
                    "nullable": true,
                    "default_value": "0"
                },
                {
                    "name": "instructor_cost",
                    "type": "numeric",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "instructor_invoice_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                }
            ],
            "constraints": [
                "check_hour_meter_values",
                "flights_aircraft_id_fkey",
                "flights_club_id_fkey",
                "flights_flight_type_id_fkey",
                "flights_instructor_id_fkey",
                "flights_instructor_invoice_id_fkey",
                "flights_payment_method_check",
                "flights_pkey",
                "flights_reservation_id_fkey",
                "flights_user_id_fkey",
                "2200_32919_1_not_null",
                "2200_32919_3_not_null",
                "2200_32919_4_not_null",
                "2200_32919_5_not_null",
                "2200_32919_7_not_null",
                "2200_32919_8_not_null",
                "2200_32919_10_not_null",
                "2200_32919_11_not_null",
                "2200_32919_12_not_null",
                "2200_32919_18_not_null"
            ]
        },
        {
            "name": "progression_templates",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "title",
                    "type": "character varying",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "description",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "category",
                    "type": "character varying",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                }
            ],
            "constraints": [
                "progression_templates_pkey",
                "2200_63988_1_not_null",
                "2200_63988_2_not_null",
                "2200_63988_4_not_null"
            ]
        },
        {
            "name": "progression_modules",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "template_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "title",
                    "type": "character varying",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "description",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "order_index",
                    "type": "integer",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "code",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                }
            ],
            "constraints": [
                "progression_modules_pkey",
                "progression_modules_template_id_fkey",
                "progression_modules_template_id_order_index_key",
                "2200_63998_1_not_null",
                "2200_63998_3_not_null",
                "2200_63998_5_not_null"
            ]
        },
        {
            "name": "progression_skills",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "module_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "title",
                    "type": "character varying",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "description",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "order_index",
                    "type": "integer",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "code",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                }
            ],
            "constraints": [
                "progression_skills_module_id_fkey",
                "progression_skills_module_id_order_index_key",
                "progression_skills_pkey",
                "2200_64015_1_not_null",
                "2200_64015_3_not_null",
                "2200_64015_5_not_null"
            ]
        },
        {
            "name": "student_progressions",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "student_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "template_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "start_date",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "completed_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "left_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": null
                }
            ],
            "constraints": [
                "student_progressions_pkey",
                "student_progressions_student_id_fkey",
                "student_progressions_student_id_fkey1",
                "student_progressions_student_id_template_id_key",
                "student_progressions_template_id_fkey",
                "2200_64032_1_not_null"
            ]
        },
        {
            "name": "skill_validations",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "progression_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "skill_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "instructor_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "validated_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "comments",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "status",
                    "type": "USER-DEFINED",
                    "nullable": true,
                    "default_value": "'validé'::skill_validation_status"
                },
                {
                    "name": "flight_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                }
            ],
            "constraints": [
                "fk_skill_validations_instructor",
                "skill_validations_flight_id_fkey",
                "skill_validations_instructor_id_fkey",
                "skill_validations_pkey",
                "skill_validations_progression_id_fkey",
                "skill_validations_progression_skill_flight_key",
                "skill_validations_skill_id_fkey",
                "2200_64053_1_not_null"
            ]
        },
        {
            "name": "aircraft_order",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "club_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "aircraft_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "position",
                    "type": "integer",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": "now()"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": "now()"
                }
            ],
            "constraints": [
                "aircraft_order_aircraft_id_fkey",
                "aircraft_order_club_id_aircraft_id_key",
                "aircraft_order_club_id_fkey",
                "aircraft_order_club_id_position_key",
                "aircraft_order_pkey",
                "2200_65142_1_not_null",
                "2200_65142_2_not_null",
                "2200_65142_3_not_null",
                "2200_65142_4_not_null",
                "2200_65142_5_not_null",
                "2200_65142_6_not_null"
            ]
        },
        {
            "name": "user_clubs",
            "columns": [
                {
                    "name": "club_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                }
            ],
            "constraints": null
        },
        {
            "name": "discovery_flights",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "gen_random_uuid()"
                },
                {
                    "name": "pilot_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "aircraft_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "date",
                    "type": "date",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "start_time",
                    "type": "time without time zone",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "end_time",
                    "type": "time without time zone",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "status",
                    "type": "text",
                    "nullable": false,
                    "default_value": "'REQUESTED'::text"
                },
                {
                    "name": "total_weight",
                    "type": "numeric",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "comments",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "CURRENT_TIMESTAMP"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "CURRENT_TIMESTAMP"
                },
                {
                    "name": "passenger_count",
                    "type": "integer",
                    "nullable": false,
                    "default_value": "1"
                },
                {
                    "name": "preferred_dates",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "contact_email",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "contact_phone",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "club_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "payment_amount",
                    "type": "bigint",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "payment_status",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "stripe_session_id",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "reservation_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                }
            ],
            "constraints": [
                "discovery_flights_aircraft_id_fkey",
                "discovery_flights_club_id_fkey",
                "discovery_flights_passenger_count_check",
                "discovery_flights_pilot_id_fkey",
                "discovery_flights_pkey",
                "discovery_flights_reservation_id_fkey",
                "discovery_flights_status_check",
                "discovery_flights_total_weight_check",
                "2200_81041_1_not_null",
                "2200_81041_7_not_null",
                "2200_81041_8_not_null",
                "2200_81041_12_not_null",
                "2200_81041_16_not_null"
            ]
        },
        {
            "name": "member_contributions",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "user_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "valid_from",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "valid_until",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "document_url",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "account_entry_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                }
            ],
            "constraints": [
                "member_contributions_account_entry_id_fkey",
                "member_contributions_pkey",
                "member_contributions_user_id_fkey",
                "2200_93173_1_not_null",
                "2200_93173_3_not_null",
                "2200_93173_4_not_null"
            ]
        },
        {
            "name": "medical_types",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "club_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "name",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "description",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "display_order",
                    "type": "integer",
                    "nullable": true,
                    "default_value": "0"
                },
                {
                    "name": "system_type",
                    "type": "boolean",
                    "nullable": true,
                    "default_value": "false"
                },
                {
                    "name": "validity_period",
                    "type": "integer",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "requires_end_date",
                    "type": "boolean",
                    "nullable": true,
                    "default_value": "true"
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                }
            ],
            "constraints": [
                "medical_types_club_id_fkey",
                "medical_types_pkey",
                "2200_104178_1_not_null",
                "2200_104178_3_not_null"
            ]
        },
        {
            "name": "medicals",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "user_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "medical_type_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "obtained_at",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "expires_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "scan_id",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                }
            ],
            "constraints": [
                "medicals_medical_type_id_fkey",
                "medicals_pkey",
                "medicals_user_id_fkey",
                "2200_104198_1_not_null",
                "2200_104198_2_not_null",
                "2200_104198_3_not_null",
                "2200_104198_4_not_null"
            ]
        },
        {
            "name": "club_events",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "title",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "description",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "location",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "start_time",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "end_time",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "type",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "created_by",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "club_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "visibility",
                    "type": "text",
                    "nullable": false,
                    "default_value": "'INTERNAL'::text"
                }
            ],
            "constraints": [
                "club_events_club_id_fkey",
                "club_events_created_by_fkey",
                "club_events_pkey",
                "club_events_type_check",
                "club_events_visibility_check",
                "2200_42062_1_not_null",
                "2200_42062_2_not_null",
                "2200_42062_5_not_null",
                "2200_42062_6_not_null",
                "2200_42062_7_not_null",
                "2200_42062_12_not_null",
                "2200_42062_13_not_null"
            ]
        },
        {
            "name": "event_participants",
            "columns": [
                {
                    "name": "event_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "user_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "status",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                }
            ],
            "constraints": [
                "event_participants_event_id_fkey",
                "event_participants_pkey",
                "event_participants_status_check",
                "event_participants_user_id_fkey",
                "2200_42078_1_not_null",
                "2200_42078_2_not_null",
                "2200_42078_3_not_null"
            ]
        },
        {
            "name": "training_history",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "user_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "module_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "question_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "answer_index",
                    "type": "integer",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "is_correct",
                    "type": "boolean",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "points_earned",
                    "type": "integer",
                    "nullable": false,
                    "default_value": "0"
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": "now()"
                }
            ],
            "constraints": [
                "training_history_module_id_fkey",
                "training_history_pkey",
                "training_history_question_id_fkey",
                "training_history_user_id_fkey",
                "2200_93886_1_not_null",
                "2200_93886_2_not_null",
                "2200_93886_3_not_null",
                "2200_93886_4_not_null",
                "2200_93886_5_not_null",
                "2200_93886_6_not_null",
                "2200_93886_7_not_null",
                "2200_93886_8_not_null"
            ]
        },
        {
            "name": "maintenance_types",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "name",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "description",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "type",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "interval_value",
                    "type": "numeric",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "tolerance",
                    "type": "numeric",
                    "nullable": true,
                    "default_value": "0"
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                }
            ],
            "constraints": [
                "maintenance_types_pkey",
                "maintenance_types_type_check",
                "2200_42230_1_not_null",
                "2200_42230_2_not_null",
                "2200_42230_4_not_null",
                "2200_42230_5_not_null"
            ]
        },
        {
            "name": "aircraft_maintenance_operations",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "aircraft_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "maintenance_type_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "last_performed_at",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "hours_at_maintenance",
                    "type": "numeric",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "cycles_at_maintenance",
                    "type": "integer",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "next_due_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "next_due_hours",
                    "type": "numeric",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "next_due_cycles",
                    "type": "integer",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "comments",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "performed_by",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                }
            ],
            "constraints": [
                "aircraft_maintenance_operations_aircraft_id_fkey",
                "aircraft_maintenance_operations_maintenance_type_id_fkey",
                "aircraft_maintenance_operations_performed_by_fkey",
                "aircraft_maintenance_operations_pkey",
                "2200_42242_1_not_null",
                "2200_42242_4_not_null"
            ]
        },
        {
            "name": "maintenance_history",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "aircraft_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "maintenance_type_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "performed_at",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "hours",
                    "type": "numeric",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "cycles",
                    "type": "integer",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "comments",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "performed_by",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "now()"
                }
            ],
            "constraints": [
                "maintenance_history_aircraft_id_fkey",
                "maintenance_history_maintenance_type_id_fkey",
                "maintenance_history_performed_by_fkey",
                "maintenance_history_pkey",
                "2200_42267_1_not_null",
                "2200_42267_4_not_null"
            ]
        },
        {
            "name": "instructor_invoice_details",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "invoice_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "flight_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "amount",
                    "type": "numeric",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": "timezone('utc'::text, now())"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": "timezone('utc'::text, now())"
                }
            ],
            "constraints": [
                "instructor_invoice_details_flight_id_fkey",
                "instructor_invoice_details_flight_id_key",
                "instructor_invoice_details_invoice_id_fkey",
                "instructor_invoice_details_pkey",
                "2200_85864_1_not_null",
                "2200_85864_2_not_null",
                "2200_85864_3_not_null",
                "2200_85864_4_not_null",
                "2200_85864_5_not_null",
                "2200_85864_6_not_null"
            ]
        },
        {
            "name": "permission_settings",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "club_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "permission_id",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "allowed_roles",
                    "type": "ARRAY",
                    "nullable": false,
                    "default_value": "'{}'::text[]"
                },
                {
                    "name": "is_custom",
                    "type": "boolean",
                    "nullable": false,
                    "default_value": "false"
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": "timezone('utc'::text, now())"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": "timezone('utc'::text, now())"
                }
            ],
            "constraints": [
                "permission_settings_club_id_fkey",
                "permission_settings_club_id_permission_id_key",
                "permission_settings_pkey",
                "2200_123576_1_not_null",
                "2200_123576_2_not_null",
                "2200_123576_3_not_null",
                "2200_123576_4_not_null",
                "2200_123576_5_not_null",
                "2200_123576_6_not_null",
                "2200_123576_7_not_null"
            ]
        },
        {
            "name": "custom_member_field_definitions",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "club_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "name",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "label",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "type",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "required",
                    "type": "boolean",
                    "nullable": true,
                    "default_value": "false"
                },
                {
                    "name": "options",
                    "type": "jsonb",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "display_order",
                    "type": "integer",
                    "nullable": false,
                    "default_value": "0"
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": "timezone('utc'::text, now())"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": "timezone('utc'::text, now())"
                },
                {
                    "name": "min_value",
                    "type": "numeric",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "max_value",
                    "type": "numeric",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "step",
                    "type": "numeric",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "accepted_file_types",
                    "type": "ARRAY",
                    "nullable": true,
                    "default_value": null
                }
            ],
            "constraints": [
                "custom_member_field_definitions_club_id_fkey",
                "custom_member_field_definitions_club_id_name_key",
                "custom_member_field_definitions_pkey",
                "custom_member_field_definitions_type_check",
                "2200_106418_1_not_null",
                "2200_106418_3_not_null",
                "2200_106418_4_not_null",
                "2200_106418_5_not_null",
                "2200_106418_8_not_null",
                "2200_106418_9_not_null",
                "2200_106418_10_not_null"
            ]
        },
        {
            "name": "custom_member_field_values",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "user_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "field_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "value",
                    "type": "jsonb",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": "timezone('utc'::text, now())"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": "timezone('utc'::text, now())"
                }
            ],
            "constraints": [
                "custom_member_field_values_field_id_fkey",
                "custom_member_field_values_pkey",
                "custom_member_field_values_user_id_field_id_key",
                "custom_member_field_values_user_id_fkey",
                "2200_106438_1_not_null",
                "2200_106438_5_not_null",
                "2200_106438_6_not_null"
            ]
        },
        {
            "name": "discovery_notes",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "flight_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "author_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "content",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "type",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "notification_settings",
                    "type": "jsonb",
                    "nullable": true,
                    "default_value": "'{\"send_sms\": false, \"sms_sent\": false, \"email_sent\": false, \"send_email\": false}'::jsonb"
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "timezone('utc'::text, now())"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": true,
                    "default_value": "timezone('utc'::text, now())"
                },
                {
                    "name": "is_archived",
                    "type": "boolean",
                    "nullable": true,
                    "default_value": "false"
                }
            ],
            "constraints": [
                "discovery_notes_author_id_fkey",
                "discovery_notes_flight_id_fkey",
                "discovery_notes_pkey",
                "discovery_notes_type_check",
                "2200_81651_1_not_null",
                "2200_81651_4_not_null"
            ]
        },
        {
            "name": "custom_aircraft_field_definitions",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "club_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "name",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "label",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "type",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "required",
                    "type": "boolean",
                    "nullable": true,
                    "default_value": "false"
                },
                {
                    "name": "options",
                    "type": "jsonb",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "min_value",
                    "type": "numeric",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "max_value",
                    "type": "numeric",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "step",
                    "type": "numeric",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "accepted_file_types",
                    "type": "ARRAY",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "display_order",
                    "type": "integer",
                    "nullable": false,
                    "default_value": "0"
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": "timezone('utc'::text, now())"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": "timezone('utc'::text, now())"
                }
            ],
            "constraints": [
                "custom_aircraft_field_definitions_club_id_fkey",
                "custom_aircraft_field_definitions_club_id_name_key",
                "custom_aircraft_field_definitions_pkey",
                "custom_aircraft_field_definitions_type_check",
                "2200_106672_1_not_null",
                "2200_106672_3_not_null",
                "2200_106672_4_not_null",
                "2200_106672_5_not_null",
                "2200_106672_12_not_null",
                "2200_106672_13_not_null",
                "2200_106672_14_not_null"
            ]
        },
        {
            "name": "custom_aircraft_field_values",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "aircraft_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "field_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "value",
                    "type": "jsonb",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": "timezone('utc'::text, now())"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": "timezone('utc'::text, now())"
                }
            ],
            "constraints": [
                "custom_aircraft_field_values_aircraft_id_field_id_key",
                "custom_aircraft_field_values_aircraft_id_fkey",
                "custom_aircraft_field_values_field_id_fkey",
                "custom_aircraft_field_values_pkey",
                "2200_106692_1_not_null",
                "2200_106692_5_not_null",
                "2200_106692_6_not_null"
            ]
        },
        {
            "name": "document_categories",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "name",
                    "type": "character varying",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "parent_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": "now()"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": "now()"
                },
                {
                    "name": "club_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                }
            ],
            "constraints": [
                "document_categories_club_id_fkey",
                "document_categories_parent_id_fkey",
                "document_categories_pkey",
                "unique_name_per_parent_club",
                "2200_67344_1_not_null",
                "2200_67344_2_not_null",
                "2200_67344_4_not_null",
                "2200_67344_5_not_null"
            ]
        },
        {
            "name": "documents",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "title",
                    "type": "character varying",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "description",
                    "type": "text",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "category_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "file_url",
                    "type": "text",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "file_type",
                    "type": "character varying",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "file_size",
                    "type": "integer",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "required_role",
                    "type": "character varying",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "created_by",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": "now()"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": "now()"
                },
                {
                    "name": "club_id",
                    "type": "uuid",
                    "nullable": true,
                    "default_value": null
                },
                {
                    "name": "display_order",
                    "type": "integer",
                    "nullable": true,
                    "default_value": null
                }
            ],
            "constraints": [
                "documents_category_id_fkey",
                "documents_club_id_fkey",
                "documents_created_by_fkey",
                "documents_pkey",
                "2200_67363_1_not_null",
                "2200_67363_2_not_null",
                "2200_67363_5_not_null",
                "2200_67363_6_not_null",
                "2200_67363_7_not_null",
                "2200_67363_10_not_null",
                "2200_67363_11_not_null"
            ]
        },
        {
            "name": "discovery_flight_prices",
            "columns": [
                {
                    "name": "id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": "uuid_generate_v4()"
                },
                {
                    "name": "club_id",
                    "type": "uuid",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "price",
                    "type": "numeric",
                    "nullable": false,
                    "default_value": null
                },
                {
                    "name": "created_at",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": "timezone('utc'::text, now())"
                },
                {
                    "name": "updated_at",
                    "type": "timestamp with time zone",
                    "nullable": false,
                    "default_value": "timezone('utc'::text, now())"
                },
                {
                    "name": "duration",
                    "type": "integer",
                    "nullable": true,
                    "default_value": "30"
                }
            ],
            "constraints": [
                "discovery_flight_prices_club_id_fkey",
                "discovery_flight_prices_club_id_unique",
                "discovery_flight_prices_pkey",
                "discovery_flight_prices_price_check",
                "2200_82138_1_not_null",
                "2200_82138_2_not_null",
                "2200_82138_3_not_null",
                "2200_82138_4_not_null",
                "2200_82138_5_not_null"
            ]
        }
    ],
    "policies": [
        {
            "name": "Everyone can view responses",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "aircraft_remark_responses",
            "command": "SELECT",
            "definition": "true",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Mechanics and admins can create responses",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "aircraft_remark_responses",
            "command": "INSERT",
            "definition": null,
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Users can join rooms in their club",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "chat_room_members",
            "command": "INSERT",
            "definition": null,
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Users can view members in their club",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "chat_room_members",
            "command": "SELECT",
            "definition": "(room_id IN ( SELECT chat_rooms.id\n   FROM chat_rooms\n  WHERE (chat_rooms.club_id IN ( SELECT club_members.club_id\n           FROM club_members\n          WHERE (club_members.user_id = auth.uid())))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable read access for all maintenance",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "maintenance",
            "command": "SELECT",
            "definition": "true",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable read access for own badges",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "user_badges",
            "command": "ALL",
            "definition": "(auth.uid() = user_id)",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Admins can update any invoice",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "instructor_invoices",
            "command": "UPDATE",
            "definition": "(auth.uid() IN ( SELECT user_group_memberships.user_id\n   FROM user_group_memberships\n  WHERE (user_group_memberships.group_id IN ( SELECT user_groups.id\n           FROM user_groups\n          WHERE ((user_groups.name)::text = 'ADMIN'::text)))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Users can create their own invoices",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "instructor_invoices",
            "command": "INSERT",
            "definition": null,
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Users can update their own draft invoices",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "instructor_invoices",
            "command": "UPDATE",
            "definition": "((instructor_id = auth.uid()) AND (status = 'DRAFT'::text))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Users can view their own invoices",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "instructor_invoices",
            "command": "SELECT",
            "definition": "((instructor_id = auth.uid()) OR (auth.uid() IN ( SELECT user_group_memberships.user_id\n   FROM user_group_memberships\n  WHERE (user_group_memberships.group_id IN ( SELECT user_groups.id\n           FROM user_groups\n          WHERE ((user_groups.name)::text = 'ADMIN'::text))))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "delete_own_invoices",
            "roles": [
                [
                    "authenticated"
                ]
            ],
            "table": "instructor_invoices",
            "command": "DELETE",
            "definition": "(auth.uid() IN ( SELECT users.auth_id\n   FROM users\n  WHERE (users.id = instructor_invoices.instructor_id)))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "update_own_invoices",
            "roles": [
                [
                    "authenticated"
                ]
            ],
            "table": "instructor_invoices",
            "command": "UPDATE",
            "definition": "(auth.uid() IN ( SELECT users.auth_id\n   FROM users\n  WHERE (users.id = instructor_invoices.instructor_id)))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable read access for all users",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "qualification_types",
            "command": "SELECT",
            "definition": "(EXISTS ( SELECT 1\n   FROM club_members cm\n  WHERE ((cm.club_id = qualification_types.club_id) AND (cm.user_id = auth.uid()))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable write access for admins",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "qualification_types",
            "command": "ALL",
            "definition": "(EXISTS ( SELECT 1\n   FROM (user_group_memberships ugm\n     JOIN user_groups ug ON ((ugm.group_id = ug.id)))\n  WHERE ((ugm.user_id = auth.uid()) AND ((ug.name)::text = 'ADMIN'::text))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "qualification_types_club_policy",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "qualification_types",
            "command": "ALL",
            "definition": "(club_id IN ( SELECT club_members.club_id\n   FROM club_members\n  WHERE (club_members.user_id = auth.uid())))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable read access for all users",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "pilot_qualifications",
            "command": "SELECT",
            "definition": "(EXISTS ( SELECT 1\n   FROM (qualification_types qt\n     JOIN club_members cm ON ((cm.club_id = qt.club_id)))\n  WHERE ((qt.id = pilot_qualifications.qualification_type_id) AND (cm.user_id = auth.uid()))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable write access for admins and instructors",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "pilot_qualifications",
            "command": "ALL",
            "definition": "(EXISTS ( SELECT 1\n   FROM (user_group_memberships ugm\n     JOIN user_groups ug ON ((ugm.group_id = ug.id)))\n  WHERE ((ugm.user_id = auth.uid()) AND ((ug.name)::text = ANY ((ARRAY['ADMIN'::character varying, 'INSTRUCTOR'::character varying])::text[])))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable insert for admins",
            "roles": [
                [
                    "authenticated"
                ]
            ],
            "table": "accounting_categories",
            "command": "INSERT",
            "definition": null,
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable update and delete for admins",
            "roles": [
                [
                    "authenticated"
                ]
            ],
            "table": "accounting_categories",
            "command": "ALL",
            "definition": "(((EXISTS ( SELECT 1\n   FROM (user_group_memberships ugm\n     JOIN user_groups ug ON ((ug.id = ugm.group_id)))\n  WHERE ((ugm.user_id = auth.uid()) AND ((ug.name)::text = 'ADMIN'::text)))) AND (club_id IN ( SELECT club_members.club_id\n   FROM club_members\n  WHERE (club_members.user_id = auth.uid())))) OR ((is_system = true) AND (EXISTS ( SELECT 1\n   FROM (user_group_memberships ugm\n     JOIN user_groups ug ON ((ug.id = ugm.group_id)))\n  WHERE ((ugm.user_id = auth.uid()) AND ((ug.name)::text = 'SYSTEM_ADMIN'::text))))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Show system entries and club entries",
            "roles": [
                [
                    "authenticated"
                ]
            ],
            "table": "accounting_categories",
            "command": "SELECT",
            "definition": "((is_system = true) OR (club_id IN ( SELECT club_members.club_id\n   FROM club_members\n  WHERE (club_members.user_id = auth.uid()))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "transactions_club_policy",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "account_transactions",
            "command": "ALL",
            "definition": "(club_id IN ( SELECT club_members.club_id\n   FROM club_members\n  WHERE (club_members.user_id = auth.uid())))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Create availabilities",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "availabilities",
            "command": "INSERT",
            "definition": null,
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Delete availabilities",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "availabilities",
            "command": "DELETE",
            "definition": "(EXISTS ( SELECT 1\n   FROM (user_group_memberships ugm\n     JOIN user_groups ug ON ((ugm.group_id = ug.id)))\n  WHERE ((ugm.user_id = auth.uid()) AND (((ug.name)::text = 'ADMIN'::text) OR ((ugm.user_id = auth.uid()) AND (((ug.name)::text = 'INSTRUCTOR'::text) OR ((ug.name)::text ~~ '%DISCOVERY%'::text))) OR ((availabilities.aircraft_id IS NOT NULL) AND ((ug.name)::text = 'MECHANIC'::text))))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Update availabilities",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "availabilities",
            "command": "UPDATE",
            "definition": "(EXISTS ( SELECT 1\n   FROM (user_group_memberships ugm\n     JOIN user_groups ug ON ((ugm.group_id = ug.id)))\n  WHERE ((ugm.user_id = auth.uid()) AND (((ug.name)::text = 'ADMIN'::text) OR ((ugm.user_id = auth.uid()) AND (((ug.name)::text = 'INSTRUCTOR'::text) OR ((ug.name)::text ~~ '%DISCOVERY%'::text))) OR ((availabilities.aircraft_id IS NOT NULL) AND ((ug.name)::text = 'MECHANIC'::text))))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "View availabilities",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "availabilities",
            "command": "SELECT",
            "definition": "(club_id IN ( SELECT club_members.club_id\n   FROM club_members\n  WHERE (club_members.user_id = auth.uid())))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "availabilities_club_policy",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "availabilities",
            "command": "ALL",
            "definition": "(club_id IN ( SELECT club_members.club_id\n   FROM club_members\n  WHERE (club_members.user_id = auth.uid())))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "license_types_club_policy",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "license_types",
            "command": "ALL",
            "definition": "(club_id IN ( SELECT club_members.club_id\n   FROM club_members\n  WHERE (club_members.user_id = auth.uid())))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "read_license_types",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "license_types",
            "command": "SELECT",
            "definition": "((is_system = true) OR (club_id IN ( SELECT club_members.club_id\n   FROM club_members\n  WHERE (club_members.user_id = auth.uid()))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "system_admin_license_types",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "license_types",
            "command": "ALL",
            "definition": "(EXISTS ( SELECT 1\n   FROM (user_group_memberships ugm\n     JOIN user_groups ug ON ((ugm.group_id = ug.id)))\n  WHERE ((ugm.user_id = auth.uid()) AND ((ug.name)::text = 'SYSTEM_ADMIN'::text))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "write_license_types",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "license_types",
            "command": "ALL",
            "definition": "((EXISTS ( SELECT 1\n   FROM (user_group_memberships ugm\n     JOIN user_groups ug ON ((ugm.group_id = ug.id)))\n  WHERE ((ugm.user_id = auth.uid()) AND ((ug.name)::text = 'ADMIN'::text)))) AND (club_id IN ( SELECT club_members.club_id\n   FROM club_members\n  WHERE (club_members.user_id = auth.uid()))) AND (is_system = false))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Club admins can manage their club's flight field definitions",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "custom_flight_field_definitions",
            "command": "ALL",
            "definition": "(EXISTS ( SELECT 1\n   FROM ((club_members cm\n     JOIN user_group_memberships ugm ON ((ugm.user_id = auth.uid())))\n     JOIN user_groups ug ON ((ug.id = ugm.group_id)))\n  WHERE ((cm.club_id = custom_flight_field_definitions.club_id) AND (cm.user_id = auth.uid()) AND ((ug.name)::text = 'ADMIN'::text))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Users can view flight field definitions of their clubs",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "custom_flight_field_definitions",
            "command": "SELECT",
            "definition": "(club_id IN ( SELECT club_members.club_id\n   FROM club_members\n  WHERE (club_members.user_id = auth.uid())))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Users can manage flight field values for flights they have acce",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "custom_flight_field_values",
            "command": "ALL",
            "definition": "(EXISTS ( SELECT 1\n   FROM ((flights f\n     JOIN custom_flight_field_definitions cfd ON ((cfd.club_id = f.club_id)))\n     JOIN club_members cm ON ((cm.club_id = f.club_id)))\n  WHERE ((f.id = custom_flight_field_values.flight_id) AND (cfd.id = custom_flight_field_values.field_id) AND (cm.user_id = auth.uid()))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Users can view flight field values for flights they have access",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "custom_flight_field_values",
            "command": "SELECT",
            "definition": "(EXISTS ( SELECT 1\n   FROM ((flights f\n     JOIN custom_flight_field_definitions cfd ON ((cfd.club_id = f.club_id)))\n     JOIN club_members cm ON ((cm.club_id = f.club_id)))\n  WHERE ((f.id = custom_flight_field_values.flight_id) AND (cfd.id = custom_flight_field_values.field_id) AND (cm.user_id = auth.uid()))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable club admin management",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "announcements",
            "command": "ALL",
            "definition": "(has_any_group(auth.uid(), ARRAY['ADMIN'::text]) AND (club_id IN ( SELECT club_members.club_id\n   FROM club_members\n  WHERE (club_members.user_id = auth.uid()))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Users can view announcements",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "announcements",
            "command": "SELECT",
            "definition": "((club_id IN ( SELECT club_members.club_id\n   FROM club_members\n  WHERE (club_members.user_id = auth.uid()))) AND (NOT (id IN ( SELECT dismissed_announcements.announcement_id\n   FROM dismissed_announcements\n  WHERE (dismissed_announcements.user_id = auth.uid())))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable write access for admins",
            "roles": [
                [
                    "authenticated"
                ]
            ],
            "table": "account_entry_types",
            "command": "ALL",
            "definition": "(((EXISTS ( SELECT 1\n   FROM (user_group_memberships ugm\n     JOIN user_groups ug ON ((ug.id = ugm.group_id)))\n  WHERE ((ugm.user_id = auth.uid()) AND ((ug.name)::text = 'ADMIN'::text)))) AND (club_id IN ( SELECT club_members.club_id\n   FROM club_members\n  WHERE (club_members.user_id = auth.uid())))) OR ((is_system = true) AND (EXISTS ( SELECT 1\n   FROM (user_group_memberships ugm\n     JOIN user_groups ug ON ((ug.id = ugm.group_id)))\n  WHERE ((ugm.user_id = auth.uid()) AND ((ug.name)::text = 'SYSTEM_ADMIN'::text))))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Show system entries and club entries",
            "roles": [
                [
                    "authenticated"
                ]
            ],
            "table": "account_entry_types",
            "command": "SELECT",
            "definition": "((is_system = true) OR (club_id IN ( SELECT club_members.club_id\n   FROM club_members\n  WHERE (club_members.user_id = auth.uid()))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "view_club_discovery_flight_features",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "discovery_flight_features",
            "command": "ALL",
            "definition": "(club_id IN ( SELECT club_members.club_id\n   FROM club_members\n  WHERE (club_members.user_id = auth.uid())))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable delete for message owners",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "private_messages",
            "command": "DELETE",
            "definition": "(auth.uid() = sender_id)",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable message sending for authenticated users",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "private_messages",
            "command": "INSERT",
            "definition": null,
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable read access for message participants",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "private_messages",
            "command": "SELECT",
            "definition": "((auth.uid() = sender_id) OR (auth.uid() = recipient_id))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable update for message owners",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "private_messages",
            "command": "UPDATE",
            "definition": "(auth.uid() = sender_id)",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable club membership management",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "club_members",
            "command": "ALL",
            "definition": "(has_any_group(auth.uid(), ARRAY['ADMIN'::text, 'INSTRUCTOR'::text]) AND (EXISTS ( SELECT 1\n   FROM club_members cm\n  WHERE ((cm.user_id = auth.uid()) AND (cm.club_id = club_members.club_id)))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "club_admin_read",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "club_members",
            "command": "SELECT",
            "definition": "is_user_admin_of_club(auth.uid(), club_id)",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "club_admin_write",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "club_members",
            "command": "ALL",
            "definition": "is_user_admin_of_club(auth.uid(), club_id)",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "member_read_own_club",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "club_members",
            "command": "SELECT",
            "definition": "(club_id IN ( SELECT club_members_1.club_id\n   FROM club_members club_members_1\n  WHERE (club_members_1.user_id = auth.uid())))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "super_admin_all_access",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "club_members",
            "command": "ALL",
            "definition": "is_super_admin(auth.uid())",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Everyone can view clubs",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "clubs",
            "command": "SELECT",
            "definition": "true",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Only super admins can manage clubs",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "clubs",
            "command": "ALL",
            "definition": "has_any_group(auth.uid(), ARRAY['ADMIN'::text])",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "create_club_policy",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "clubs",
            "command": "INSERT",
            "definition": null,
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Allow all access to admins for memberships",
            "roles": [
                [
                    "authenticated"
                ]
            ],
            "table": "user_group_memberships",
            "command": "ALL",
            "definition": "(EXISTS ( SELECT 1\n   FROM user_group_memberships ugm\n  WHERE ((ugm.user_id = auth.uid()) AND (ugm.group_id IN ( SELECT user_groups.id\n           FROM user_groups\n          WHERE ((user_groups.name)::text = 'Administrateurs'::text))))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Allow read access to all authenticated users for memberships",
            "roles": [
                [
                    "authenticated"
                ]
            ],
            "table": "user_group_memberships",
            "command": "SELECT",
            "definition": "true",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Authenticated users can modify is_system and club groups",
            "roles": [
                [
                    "authenticated"
                ]
            ],
            "table": "user_groups",
            "command": "ALL",
            "definition": "((is_system = true) OR (club_id IN ( SELECT club_members.club_id\n   FROM club_members\n  WHERE (club_members.user_id = auth.uid()))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable aircraft remarks updates for mechanics and admins",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "aircraft_remarks",
            "command": "UPDATE",
            "definition": "(has_any_group(auth.uid(), ARRAY['MECHANIC'::text, 'ADMIN'::text]) AND (EXISTS ( SELECT 1\n   FROM club_members\n  WHERE ((club_members.user_id = auth.uid()) AND (club_members.club_id IN ( SELECT aircraft.club_id\n           FROM aircraft\n          WHERE (aircraft.id = aircraft_remarks.aircraft_id)))))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable read access for club remarks",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "aircraft_remarks",
            "command": "SELECT",
            "definition": "(EXISTS ( SELECT 1\n   FROM (club_members\n     JOIN aircraft ON ((club_members.club_id = aircraft.club_id)))\n  WHERE ((club_members.user_id = auth.uid()) AND (aircraft.id = aircraft_remarks.aircraft_id))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "aircraft_remarks_club_policy",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "aircraft_remarks",
            "command": "ALL",
            "definition": "(EXISTS ( SELECT 1\n   FROM (aircraft a\n     JOIN club_members cm ON ((cm.club_id = a.club_id)))\n  WHERE ((a.id = aircraft_remarks.aircraft_id) AND (cm.user_id = auth.uid()))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "aircraft_remarks_create",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "aircraft_remarks",
            "command": "INSERT",
            "definition": null,
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Users can delete their own messages",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "chat_messages",
            "command": "DELETE",
            "definition": "(auth.uid() = user_id)",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Users can send messages to their club's rooms",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "chat_messages",
            "command": "INSERT",
            "definition": null,
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Users can update their own messages",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "chat_messages",
            "command": "UPDATE",
            "definition": "(auth.uid() = user_id)",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Users can view messages in their club's rooms",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "chat_messages",
            "command": "SELECT",
            "definition": "(EXISTS ( SELECT 1\n   FROM (club_members\n     JOIN chat_rooms ON ((club_members.club_id = chat_rooms.club_id)))\n  WHERE ((club_members.user_id = auth.uid()) AND (chat_rooms.id = chat_messages.room_id))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Users can create chat rooms in their club",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "chat_rooms",
            "command": "INSERT",
            "definition": null,
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Users can create rooms in their club",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "chat_rooms",
            "command": "INSERT",
            "definition": null,
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Users can view chat rooms in their club",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "chat_rooms",
            "command": "SELECT",
            "definition": "(EXISTS ( SELECT 1\n   FROM club_members\n  WHERE ((club_members.user_id = auth.uid()) AND (club_members.club_id = chat_rooms.club_id))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Users can view chat rooms in their club based on type",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "chat_rooms",
            "command": "SELECT",
            "definition": "((club_id IN ( SELECT club_members.club_id\n   FROM club_members\n  WHERE (club_members.user_id = auth.uid()))) AND (((type)::text = 'PILOT_GROUP'::text) OR (((type)::text = 'INSTRUCTOR_GROUP'::text) AND has_any_group(auth.uid(), ARRAY['INSTRUCTOR'::text])) OR (((type)::text = 'INSTRUCTOR_STUDENT'::text) AND (has_any_group(auth.uid(), ARRAY['INSTRUCTOR'::text]) OR has_any_group(auth.uid(), ARRAY['PILOT'::text])))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Users can view rooms in their club",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "chat_rooms",
            "command": "SELECT",
            "definition": "(club_id IN ( SELECT club_members.club_id\n   FROM club_members\n  WHERE (club_members.user_id = auth.uid())))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable write access for admins",
            "roles": [
                [
                    "authenticated"
                ]
            ],
            "table": "flight_types",
            "command": "ALL",
            "definition": "(((EXISTS ( SELECT 1\n   FROM (user_group_memberships ugm\n     JOIN user_groups ug ON ((ug.id = ugm.group_id)))\n  WHERE ((ugm.user_id = auth.uid()) AND ((ug.name)::text = 'ADMIN'::text)))) AND (club_id IN ( SELECT club_members.club_id\n   FROM club_members\n  WHERE (club_members.user_id = auth.uid()))) AND (NOT is_system)) OR ((is_system = true) AND (EXISTS ( SELECT 1\n   FROM (user_group_memberships ugm\n     JOIN user_groups ug ON ((ug.id = ugm.group_id)))\n  WHERE ((ugm.user_id = auth.uid()) AND ((ug.name)::text = 'SYSTEM_ADMIN'::text))))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Show system types and club types",
            "roles": [
                [
                    "authenticated"
                ]
            ],
            "table": "flight_types",
            "command": "SELECT",
            "definition": "((is_system = true) OR (club_id IN ( SELECT club_members.club_id\n   FROM club_members\n  WHERE (club_members.user_id = auth.uid()))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "admin_club_users_all",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "users",
            "command": "ALL",
            "definition": "(EXISTS ( SELECT 1\n   FROM (((user_group_memberships ugm\n     JOIN user_groups ug ON ((ugm.group_id = ug.id)))\n     JOIN club_members admin_cm ON ((admin_cm.user_id = auth.uid())))\n     JOIN club_members target_cm ON ((target_cm.club_id = admin_cm.club_id)))\n  WHERE ((ugm.user_id = auth.uid()) AND ((ug.name)::text = 'ADMIN'::text) AND (target_cm.user_id = users.id))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "update_own_profile",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "users",
            "command": "UPDATE",
            "definition": "(auth.uid() = id)",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "view_club_members",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "users",
            "command": "SELECT",
            "definition": "(EXISTS ( SELECT 1\n   FROM (club_members viewer\n     JOIN club_members target ON ((target.club_id = viewer.club_id)))\n  WHERE ((viewer.user_id = auth.uid()) AND (target.user_id = users.id))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "view_own_profile",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "users",
            "command": "SELECT",
            "definition": "(auth.uid() = id)",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable aircraft management for admins and mechanics",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "aircraft",
            "command": "ALL",
            "definition": "(has_any_group(auth.uid(), ARRAY['ADMIN'::text, 'MECHANIC'::text]) AND (EXISTS ( SELECT 1\n   FROM club_members\n  WHERE ((club_members.user_id = auth.uid()) AND (club_members.club_id = aircraft.club_id)))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable read access for club members",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "aircraft",
            "command": "SELECT",
            "definition": "(EXISTS ( SELECT 1\n   FROM club_members\n  WHERE ((club_members.user_id = auth.uid()) AND (club_members.club_id = aircraft.club_id))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable read access for club members",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "reservations",
            "command": "SELECT",
            "definition": "(EXISTS ( SELECT 1\n   FROM club_members\n  WHERE ((club_members.user_id = auth.uid()) AND (club_members.club_id = reservations.club_id))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable reservation creation for club members",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "reservations",
            "command": "INSERT",
            "definition": null,
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable reservation deletion for admins and owners",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "reservations",
            "command": "DELETE",
            "definition": "((EXISTS ( SELECT 1\n   FROM club_members\n  WHERE ((club_members.user_id = auth.uid()) AND (club_members.club_id = reservations.club_id)))) AND (has_any_group(auth.uid(), ARRAY['ADMIN'::text]) OR (user_id = auth.uid()) OR (instructor_id = auth.uid())))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable reservation updates for admins and owners",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "reservations",
            "command": "UPDATE",
            "definition": "((EXISTS ( SELECT 1\n   FROM club_members\n  WHERE ((club_members.user_id = auth.uid()) AND (club_members.club_id = reservations.club_id)))) AND (has_any_group(auth.uid(), ARRAY['ADMIN'::text]) OR (user_id = auth.uid()) OR (instructor_id = auth.uid())))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable read access for own progress",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "user_progress",
            "command": "SELECT",
            "definition": "(auth.uid() = user_id)",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable update for own progress",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "user_progress",
            "command": "UPDATE",
            "definition": "(auth.uid() = user_id)",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable write access for own progress",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "user_progress",
            "command": "INSERT",
            "definition": null,
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable ADMIN and INSTRUCTOR question management",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "training_questions",
            "command": "ALL",
            "definition": "has_any_group(auth.uid(), ARRAY['ADMIN'::text, 'INSTRUCTOR'::text])",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable read access for all users",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "training_questions",
            "command": "SELECT",
            "definition": "(auth.role() = 'authenticated'::text)",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable delete for instructors and admins",
            "roles": [
                [
                    "authenticated"
                ]
            ],
            "table": "skill_validations",
            "command": "DELETE",
            "definition": "has_any_group(auth.uid(), ARRAY['INSTRUCTOR'::text, 'ADMIN'::text])",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable read access for own validations and instructors/admins",
            "roles": [
                [
                    "authenticated"
                ]
            ],
            "table": "skill_validations",
            "command": "SELECT",
            "definition": "(EXISTS ( SELECT 1\n   FROM student_progressions sp\n  WHERE ((sp.id = skill_validations.progression_id) AND ((sp.student_id = auth.uid()) OR has_any_group(auth.uid(), ARRAY['INSTRUCTOR'::text, 'ADMIN'::text])))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable read access for skill validations",
            "roles": [
                [
                    "authenticated"
                ]
            ],
            "table": "skill_validations",
            "command": "SELECT",
            "definition": "((instructor_id = auth.uid()) OR (EXISTS ( SELECT 1\n   FROM club_members viewer\n  WHERE ((viewer.user_id = auth.uid()) AND (EXISTS ( SELECT 1\n           FROM (club_members student\n             JOIN student_progressions sp ON ((sp.student_id = student.user_id)))\n          WHERE ((student.club_id = viewer.club_id) AND (sp.id = skill_validations.progression_id))))))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable write access for instructors and admins",
            "roles": [
                [
                    "authenticated"
                ]
            ],
            "table": "skill_validations",
            "command": "INSERT",
            "definition": null,
            "permissive": "PERMISSIVE"
        },
        {
            "name": "skill_validations_update",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "skill_validations",
            "command": "UPDATE",
            "definition": "has_any_group(auth.uid(), ARRAY['INSTRUCTOR'::text, 'ADMIN'::text])",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable flight creation for club members",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "flights",
            "command": "INSERT",
            "definition": null,
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable flight deletion for admins and owners of unvalidated fli",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "flights",
            "command": "DELETE",
            "definition": "((has_any_group(auth.uid(), ARRAY['ADMIN'::text]) OR ((user_id = auth.uid()) AND (NOT is_validated) AND (club_id IN ( SELECT club_members.club_id\n   FROM club_members\n  WHERE (club_members.user_id = auth.uid()))))) AND (NOT (EXISTS ( SELECT 1\n   FROM account_entries\n  WHERE ((account_entries.flight_id = flights.id) AND (account_entries.is_validated = true))))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable flight updates for admins and owners",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "flights",
            "command": "UPDATE",
            "definition": "((club_id IN ( SELECT club_members.club_id\n   FROM club_members\n  WHERE (club_members.user_id = auth.uid()))) AND (has_any_group(auth.uid(), ARRAY['ADMIN'::text]) OR (user_id = auth.uid()) OR (instructor_id = auth.uid())))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable flight validation for admins",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "flights",
            "command": "UPDATE",
            "definition": "has_any_group(auth.uid(), ARRAY['ADMIN'::text])",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "flights_user_access",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "flights",
            "command": "SELECT",
            "definition": "((instructor_id = auth.uid()) OR (user_id = auth.uid()) OR (EXISTS ( SELECT 1\n   FROM club_members access_check\n  WHERE ((access_check.club_id = flights.club_id) AND (access_check.user_id = auth.uid())))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable ADMIN and INSTRUCTOR challenge management",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "daily_challenges",
            "command": "ALL",
            "definition": "has_any_group(auth.uid(), ARRAY['ADMIN'::text, 'INSTRUCTOR'::text])",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable read access for own challenges",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "daily_challenges",
            "command": "SELECT",
            "definition": "(auth.uid() = user_id)",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "daily_challenges_club_policy",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "daily_challenges",
            "command": "ALL",
            "definition": "(club_id IN ( SELECT club_members.club_id\n   FROM club_members\n  WHERE (club_members.user_id = auth.uid())))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable ADMIN module management",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "training_modules",
            "command": "ALL",
            "definition": "has_any_group(auth.uid(), ARRAY['ADMIN'::text])",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable delete for instructors and admins",
            "roles": [
                [
                    "authenticated"
                ]
            ],
            "table": "training_modules",
            "command": "DELETE",
            "definition": "has_any_group(auth.uid(), ARRAY['INSTRUCTOR'::text, 'ADMIN'::text])",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable read access for all users",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "training_modules",
            "command": "SELECT",
            "definition": "(auth.role() = 'authenticated'::text)",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "training_modules_club_policy",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "training_modules",
            "command": "ALL",
            "definition": "((club_id IN ( SELECT club_members.club_id\n   FROM club_members\n  WHERE (club_members.user_id = auth.uid()))) OR (club_id IS NULL))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable delete for instructors and admins",
            "roles": [
                [
                    "authenticated"
                ]
            ],
            "table": "progression_templates",
            "command": "DELETE",
            "definition": "has_any_group(auth.uid(), ARRAY['INSTRUCTOR'::text, 'ADMIN'::text])",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable read access for all users",
            "roles": [
                [
                    "authenticated"
                ]
            ],
            "table": "progression_templates",
            "command": "SELECT",
            "definition": "true",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable write access for instructors and admins",
            "roles": [
                [
                    "authenticated"
                ]
            ],
            "table": "progression_templates",
            "command": "INSERT",
            "definition": null,
            "permissive": "PERMISSIVE"
        },
        {
            "name": "progression_templates_update",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "progression_templates",
            "command": "UPDATE",
            "definition": "has_any_group(auth.uid(), ARRAY['INSTRUCTOR'::text, 'ADMIN'::text])",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Admins and instructors can insert entries",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "account_entries",
            "command": "INSERT",
            "definition": null,
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Admins can delete entries",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "account_entries",
            "command": "DELETE",
            "definition": "((auth.uid() IN ( SELECT u.auth_id\n   FROM ((users u\n     JOIN user_group_memberships m ON ((u.id = m.user_id)))\n     JOIN user_groups g ON ((m.group_id = g.id)))\n  WHERE ((g.name)::text = ANY (ARRAY[('ADMIN'::character varying)::text])))) AND (club_id IN ( SELECT club_members.club_id\n   FROM club_members\n  WHERE (club_members.user_id = auth.uid()))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable admin deletions",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "account_entries",
            "command": "DELETE",
            "definition": "has_any_group(auth.uid(), ARRAY['ADMIN'::text])",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable admin modifications",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "account_entries",
            "command": "UPDATE",
            "definition": "has_any_group(auth.uid(), ARRAY['ADMIN'::text])",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable club member view for admins ",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "account_entries",
            "command": "SELECT",
            "definition": "((auth.uid() IN ( SELECT u.auth_id\n   FROM ((users u\n     JOIN user_group_memberships m ON ((u.id = m.user_id)))\n     JOIN user_groups g ON ((m.group_id = g.id)))\n  WHERE ((g.name)::text = ANY (ARRAY[('ADMIN'::character varying)::text])))) AND (EXISTS ( SELECT 1\n   FROM (club_members cm1\n     JOIN club_members cm2 ON ((cm1.club_id = cm2.club_id)))\n  WHERE ((cm1.user_id = auth.uid()) AND (cm2.user_id = account_entries.user_id)))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable insert for validated payments",
            "roles": [
                [
                    "authenticated"
                ]
            ],
            "table": "account_entries",
            "command": "INSERT",
            "definition": null,
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable user insert",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "account_entries",
            "command": "INSERT",
            "definition": null,
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Service can manage all entries",
            "roles": [
                [
                    "service_role"
                ]
            ],
            "table": "account_entries",
            "command": "ALL",
            "definition": "true",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "delete_own_entries",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "account_entries",
            "command": "DELETE",
            "definition": "((auth.uid() = user_id) AND (NOT is_validated))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "insert_own_entries",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "account_entries",
            "command": "INSERT",
            "definition": null,
            "permissive": "PERMISSIVE"
        },
        {
            "name": "read_own_entries",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "account_entries",
            "command": "SELECT",
            "definition": "((auth.uid() = user_id) OR (auth.uid() = assigned_to_id))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "update_own_entries",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "account_entries",
            "command": "UPDATE",
            "definition": "((auth.uid() = user_id) AND (NOT is_validated))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable delete for instructors and admins",
            "roles": [
                [
                    "authenticated"
                ]
            ],
            "table": "progression_modules",
            "command": "DELETE",
            "definition": "has_any_group(auth.uid(), ARRAY['INSTRUCTOR'::text, 'ADMIN'::text])",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable read access for all users",
            "roles": [
                [
                    "authenticated"
                ]
            ],
            "table": "progression_modules",
            "command": "SELECT",
            "definition": "true",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable read access for progression modules",
            "roles": [
                [
                    "authenticated"
                ]
            ],
            "table": "progression_modules",
            "command": "SELECT",
            "definition": "true",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable write access for instructors and admins",
            "roles": [
                [
                    "authenticated"
                ]
            ],
            "table": "progression_modules",
            "command": "INSERT",
            "definition": null,
            "permissive": "PERMISSIVE"
        },
        {
            "name": "progression_modules_update",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "progression_modules",
            "command": "UPDATE",
            "definition": "has_any_group(auth.uid(), ARRAY['INSTRUCTOR'::text, 'ADMIN'::text])",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable delete for instructors and admins",
            "roles": [
                [
                    "authenticated"
                ]
            ],
            "table": "progression_skills",
            "command": "DELETE",
            "definition": "has_any_group(auth.uid(), ARRAY['INSTRUCTOR'::text, 'ADMIN'::text])",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable read access for all users",
            "roles": [
                [
                    "authenticated"
                ]
            ],
            "table": "progression_skills",
            "command": "SELECT",
            "definition": "true",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable read access for progression skills",
            "roles": [
                [
                    "authenticated"
                ]
            ],
            "table": "progression_skills",
            "command": "SELECT",
            "definition": "true",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable write access for instructors and admins",
            "roles": [
                [
                    "authenticated"
                ]
            ],
            "table": "progression_skills",
            "command": "INSERT",
            "definition": null,
            "permissive": "PERMISSIVE"
        },
        {
            "name": "progression_skills_update",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "progression_skills",
            "command": "UPDATE",
            "definition": "has_any_group(auth.uid(), ARRAY['INSTRUCTOR'::text, 'ADMIN'::text])",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable delete for instructors and admins",
            "roles": [
                [
                    "authenticated"
                ]
            ],
            "table": "student_progressions",
            "command": "DELETE",
            "definition": "has_any_group(auth.uid(), ARRAY['INSTRUCTOR'::text, 'ADMIN'::text])",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable read access for own progressions and instructors/admins",
            "roles": [
                [
                    "authenticated"
                ]
            ],
            "table": "student_progressions",
            "command": "SELECT",
            "definition": "((student_id = auth.uid()) OR has_any_group(auth.uid(), ARRAY['INSTRUCTOR'::text, 'ADMIN'::text]))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable read access for student progressions",
            "roles": [
                [
                    "authenticated"
                ]
            ],
            "table": "student_progressions",
            "command": "SELECT",
            "definition": "(EXISTS ( SELECT 1\n   FROM club_members viewer\n  WHERE ((viewer.user_id = auth.uid()) AND (EXISTS ( SELECT 1\n           FROM club_members student\n          WHERE ((student.club_id = viewer.club_id) AND (student.user_id = student_progressions.student_id)))))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable write access for instructors and admins",
            "roles": [
                [
                    "authenticated"
                ]
            ],
            "table": "student_progressions",
            "command": "INSERT",
            "definition": null,
            "permissive": "PERMISSIVE"
        },
        {
            "name": "student_progressions_update",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "student_progressions",
            "command": "UPDATE",
            "definition": "has_any_group(auth.uid(), ARRAY['INSTRUCTOR'::text, 'ADMIN'::text])",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable aircraft order management for admins",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "aircraft_order",
            "command": "ALL",
            "definition": "(has_any_group(auth.uid(), ARRAY['ADMIN'::text]) AND (EXISTS ( SELECT 1\n   FROM club_members\n  WHERE ((club_members.user_id = auth.uid()) AND (club_members.club_id = aircraft_order.club_id)))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable read access for club members",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "aircraft_order",
            "command": "SELECT",
            "definition": "(club_id IN ( SELECT club_members.club_id\n   FROM club_members\n  WHERE (club_members.user_id = auth.uid())))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable delete for admins only",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "discovery_flights",
            "command": "DELETE",
            "definition": "( SELECT is_member_of_group(auth.uid(), 'ADMIN'::text) AS is_member_of_group)",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable service role select for discovery flights",
            "roles": [
                [
                    "service_role"
                ]
            ],
            "table": "discovery_flights",
            "command": "SELECT",
            "definition": "true",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable service role update for discovery flights",
            "roles": [
                [
                    "service_role"
                ]
            ],
            "table": "discovery_flights",
            "command": "UPDATE",
            "definition": "true",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable update for admins and discovery pilots",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "discovery_flights",
            "command": "UPDATE",
            "definition": "(( SELECT (is_member_of_group(auth.uid(), 'ADMIN'::text) OR is_member_of_group(auth.uid(), 'DISCOVERY_PILOT'::text))) OR (pilot_id = auth.uid()))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "admin_manage_club_discovery_flights",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "discovery_flights",
            "command": "ALL",
            "definition": "((club_id IN ( SELECT club_members.club_id\n   FROM club_members\n  WHERE (club_members.user_id = auth.uid()))) AND (EXISTS ( SELECT 1\n   FROM (user_group_memberships ugm\n     JOIN user_groups ug ON ((ugm.group_id = ug.id)))\n  WHERE ((ugm.user_id = auth.uid()) AND ((ug.name)::text = 'ADMIN'::text)))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "delete_club_discovery_flights",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "discovery_flights",
            "command": "DELETE",
            "definition": "(club_id IN ( SELECT club_members.club_id\n   FROM club_members\n  WHERE (club_members.user_id = auth.uid())))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "insert_club_discovery_flights",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "discovery_flights",
            "command": "INSERT",
            "definition": null,
            "permissive": "PERMISSIVE"
        },
        {
            "name": "update_club_discovery_flights",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "discovery_flights",
            "command": "UPDATE",
            "definition": "(club_id IN ( SELECT club_members.club_id\n   FROM club_members\n  WHERE (club_members.user_id = auth.uid())))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "view_club_discovery_flights",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "discovery_flights",
            "command": "SELECT",
            "definition": "(club_id IN ( SELECT club_members.club_id\n   FROM club_members\n  WHERE (club_members.user_id = auth.uid())))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Admins and instructors can insert contributions",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "member_contributions",
            "command": "INSERT",
            "definition": null,
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Admins and instructors can update contributions",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "member_contributions",
            "command": "UPDATE",
            "definition": "(auth.uid() IN ( SELECT u.auth_id\n   FROM ((users u\n     JOIN user_group_memberships m ON ((u.id = m.user_id)))\n     JOIN user_groups g ON ((m.group_id = g.id)))\n  WHERE ((g.name)::text = ANY ((ARRAY['ADMIN'::character varying, 'INSTRUCTOR'::character varying])::text[]))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Admins and instructors can view all contributions",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "member_contributions",
            "command": "SELECT",
            "definition": "(auth.uid() IN ( SELECT u.auth_id\n   FROM ((users u\n     JOIN user_group_memberships m ON ((u.id = m.user_id)))\n     JOIN user_groups g ON ((m.group_id = g.id)))\n  WHERE ((g.name)::text = ANY ((ARRAY['ADMIN'::character varying, 'INSTRUCTOR'::character varying])::text[]))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Users can view their own contributions",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "member_contributions",
            "command": "SELECT",
            "definition": "(auth.uid() IN ( SELECT users.auth_id\n   FROM users\n  WHERE (users.id = member_contributions.user_id)))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "medical_types_club_policy",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "medical_types",
            "command": "ALL",
            "definition": "(club_id IN ( SELECT club_members.club_id\n   FROM club_members\n  WHERE (club_members.user_id = auth.uid())))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "read_medical_types",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "medical_types",
            "command": "SELECT",
            "definition": "((system_type = true) OR (club_id IN ( SELECT club_members.club_id\n   FROM club_members\n  WHERE (club_members.user_id = auth.uid()))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "system_admin_medical_types",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "medical_types",
            "command": "ALL",
            "definition": "(EXISTS ( SELECT 1\n   FROM (user_group_memberships ugm\n     JOIN user_groups ug ON ((ugm.group_id = ug.id)))\n  WHERE ((ugm.user_id = auth.uid()) AND ((ug.name)::text = 'SYSTEM_ADMIN'::text))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "write_medical_types",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "medical_types",
            "command": "ALL",
            "definition": "((EXISTS ( SELECT 1\n   FROM (user_group_memberships ugm\n     JOIN user_groups ug ON ((ugm.group_id = ug.id)))\n  WHERE ((ugm.user_id = auth.uid()) AND ((ug.name)::text = 'ADMIN'::text)))) AND (club_id IN ( SELECT club_members.club_id\n   FROM club_members\n  WHERE (club_members.user_id = auth.uid()))) AND (system_type = false))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "medicals_read_policy",
            "roles": [
                [
                    "authenticated"
                ]
            ],
            "table": "medicals",
            "command": "SELECT",
            "definition": "((user_id = auth.uid()) OR (EXISTS ( SELECT 1\n   FROM club_members viewer\n  WHERE ((viewer.user_id = auth.uid()) AND (EXISTS ( SELECT 1\n           FROM club_members target\n          WHERE ((target.club_id = viewer.club_id) AND (target.user_id = medicals.user_id))))))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "medicals_write_policy",
            "roles": [
                [
                    "authenticated"
                ]
            ],
            "table": "medicals",
            "command": "ALL",
            "definition": "((user_id = auth.uid()) OR has_any_group(auth.uid(), ARRAY['ADMIN'::text]))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Everyone can view participants",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "event_participants",
            "command": "SELECT",
            "definition": "true",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Users can manage their own participation",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "event_participants",
            "command": "ALL",
            "definition": "(user_id = auth.uid())",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "All users can create events",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "club_events",
            "command": "INSERT",
            "definition": null,
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Club members can view events",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "club_events",
            "command": "SELECT",
            "definition": "(EXISTS ( SELECT 1\n   FROM club_members\n  WHERE ((club_members.user_id = auth.uid()) AND (club_members.club_id = club_events.club_id))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Event creators and admins can delete events",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "club_events",
            "command": "DELETE",
            "definition": "((created_by = auth.uid()) OR has_any_group(auth.uid(), ARRAY['ADMIN'::text]))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Event creators and admins can update events",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "club_events",
            "command": "UPDATE",
            "definition": "((created_by = auth.uid()) OR has_any_group(auth.uid(), ARRAY['ADMIN'::text]))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "club_events_club_policy",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "club_events",
            "command": "ALL",
            "definition": "(club_id IN ( SELECT club_members.club_id\n   FROM club_members\n  WHERE (club_members.user_id = auth.uid())))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Mechanics and admins can manage maintenance operations",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "aircraft_maintenance_operations",
            "command": "ALL",
            "definition": "has_any_group(auth.uid(), ARRAY['MECHANIC'::text, 'ADMIN'::text])",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "maintenance_operations_policy",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "aircraft_maintenance_operations",
            "command": "ALL",
            "definition": "(EXISTS ( SELECT 1\n   FROM (aircraft a\n     JOIN club_members cm ON ((cm.club_id = a.club_id)))\n  WHERE ((a.id = aircraft_maintenance_operations.aircraft_id) AND (cm.user_id = auth.uid()))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Mechanics and admins can add maintenance history",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "maintenance_history",
            "command": "INSERT",
            "definition": null,
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Users can create their own invoice details",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "instructor_invoice_details",
            "command": "INSERT",
            "definition": null,
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Users can update their own invoice details",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "instructor_invoice_details",
            "command": "UPDATE",
            "definition": "(invoice_id IN ( SELECT instructor_invoices.id\n   FROM instructor_invoices\n  WHERE ((instructor_invoices.instructor_id = auth.uid()) AND (instructor_invoices.status = 'DRAFT'::text))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Users can view their own invoice details",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "instructor_invoice_details",
            "command": "SELECT",
            "definition": "((invoice_id IN ( SELECT instructor_invoices.id\n   FROM instructor_invoices\n  WHERE (instructor_invoices.instructor_id = auth.uid()))) OR (auth.uid() IN ( SELECT user_group_memberships.user_id\n   FROM user_group_memberships\n  WHERE (user_group_memberships.group_id IN ( SELECT user_groups.id\n           FROM user_groups\n          WHERE ((user_groups.name)::text = 'ADMIN'::text))))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "delete_own_invoice_details",
            "roles": [
                [
                    "authenticated"
                ]
            ],
            "table": "instructor_invoice_details",
            "command": "DELETE",
            "definition": "(EXISTS ( SELECT 1\n   FROM (instructor_invoices i\n     JOIN users u ON ((u.id = i.instructor_id)))\n  WHERE ((i.id = instructor_invoice_details.invoice_id) AND (u.auth_id = auth.uid()))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Admins can manage maintenance types",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "maintenance_types",
            "command": "ALL",
            "definition": "has_any_group(auth.uid(), ARRAY['ADMIN'::text])",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Everyone can view maintenance types",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "maintenance_types",
            "command": "SELECT",
            "definition": "true",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "admin_manage_club_permission_settings",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "permission_settings",
            "command": "ALL",
            "definition": "(EXISTS ( SELECT 1\n   FROM ((club_members cm\n     JOIN user_group_memberships ugm ON ((ugm.user_id = cm.user_id)))\n     JOIN user_groups ug ON ((ug.id = ugm.group_id)))\n  WHERE ((cm.user_id = auth.uid()) AND (cm.club_id = permission_settings.club_id) AND (cm.status = 'ACTIVE'::text) AND ((ug.name)::text = 'ADMIN'::text))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "view_club_permission_settings",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "permission_settings",
            "command": "SELECT",
            "definition": "(EXISTS ( SELECT 1\n   FROM club_members cm\n  WHERE ((cm.user_id = auth.uid()) AND (cm.club_id = permission_settings.club_id) AND (cm.status = 'ACTIVE'::text))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Club admins can manage field values for their club members",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "custom_member_field_values",
            "command": "ALL",
            "definition": "(EXISTS ( SELECT 1\n   FROM (((custom_member_field_definitions cfd\n     JOIN club_members cm ON ((cm.club_id = cfd.club_id)))\n     JOIN user_group_memberships ugm ON ((ugm.user_id = auth.uid())))\n     JOIN user_groups ug ON ((ug.id = ugm.group_id)))\n  WHERE ((cfd.id = custom_member_field_values.field_id) AND (cm.user_id = auth.uid()) AND ((ug.name)::text = 'ADMIN'::text))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Users can view and edit their own field values",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "custom_member_field_values",
            "command": "ALL",
            "definition": "(user_id = auth.uid())",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Club admins can manage their club's field definitions",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "custom_member_field_definitions",
            "command": "ALL",
            "definition": "(EXISTS ( SELECT 1\n   FROM ((club_members cm\n     JOIN user_group_memberships ugm ON ((ugm.user_id = auth.uid())))\n     JOIN user_groups ug ON ((ug.id = ugm.group_id)))\n  WHERE ((cm.club_id = custom_member_field_definitions.club_id) AND (cm.user_id = auth.uid()) AND ((ug.name)::text = 'ADMIN'::text))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Users can view field definitions of their clubs",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "custom_member_field_definitions",
            "command": "SELECT",
            "definition": "(club_id IN ( SELECT club_members.club_id\n   FROM club_members\n  WHERE (club_members.user_id = auth.uid())))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Les notes peuvent être créées par les pilotes découverte et",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "discovery_notes",
            "command": "INSERT",
            "definition": null,
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Les notes sont visibles par les pilotes découverte et admins",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "discovery_notes",
            "command": "SELECT",
            "definition": "(EXISTS ( SELECT 1\n   FROM (user_group_memberships ugm\n     JOIN user_groups ug ON ((ugm.group_id = ug.id)))\n  WHERE ((ugm.user_id = auth.uid()) AND ((ug.name)::text = ANY ((ARRAY['ADMIN'::character varying, 'DISCOVERY_PILOT'::character varying])::text[])))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Club admins can manage their club's field definitions",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "custom_aircraft_field_definitions",
            "command": "ALL",
            "definition": "(EXISTS ( SELECT 1\n   FROM ((club_members cm\n     JOIN user_group_memberships ugm ON ((ugm.user_id = auth.uid())))\n     JOIN user_groups ug ON ((ug.id = ugm.group_id)))\n  WHERE ((cm.club_id = custom_aircraft_field_definitions.club_id) AND (cm.user_id = auth.uid()) AND ((ug.name)::text = 'ADMIN'::text))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Users can view field definitions of their clubs",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "custom_aircraft_field_definitions",
            "command": "SELECT",
            "definition": "(club_id IN ( SELECT club_members.club_id\n   FROM club_members\n  WHERE (club_members.user_id = auth.uid())))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Club admins can manage field values for their club aircrafts",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "custom_aircraft_field_values",
            "command": "ALL",
            "definition": "(EXISTS ( SELECT 1\n   FROM (((custom_aircraft_field_definitions cfd\n     JOIN club_members cm ON ((cm.club_id = cfd.club_id)))\n     JOIN user_group_memberships ugm ON ((ugm.user_id = auth.uid())))\n     JOIN user_groups ug ON ((ug.id = ugm.group_id)))\n  WHERE ((cfd.id = custom_aircraft_field_values.field_id) AND (cm.user_id = auth.uid()) AND ((ug.name)::text = 'ADMIN'::text))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Users can view field values of their club's aircrafts",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "custom_aircraft_field_values",
            "command": "SELECT",
            "definition": "(EXISTS ( SELECT 1\n   FROM (custom_aircraft_field_definitions cfd\n     JOIN club_members cm ON ((cm.club_id = cfd.club_id)))\n  WHERE ((cfd.id = custom_aircraft_field_values.field_id) AND (cm.user_id = auth.uid()))))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable delete for authenticated users",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "document_categories",
            "command": "DELETE",
            "definition": "has_any_group(auth.uid(), ARRAY['ADMIN'::text, 'INSTRUCTOR'::text])",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable read access for all users",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "document_categories",
            "command": "SELECT",
            "definition": "true",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable update for authenticated users",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "document_categories",
            "command": "UPDATE",
            "definition": "has_any_group(auth.uid(), ARRAY['ADMIN'::text, 'INSTRUCTOR'::text])",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "document_categories_club_policy",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "document_categories",
            "command": "ALL",
            "definition": "(club_id IN ( SELECT club_members.club_id\n   FROM club_members\n  WHERE (club_members.user_id = auth.uid())))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "document_categories_insert",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "document_categories",
            "command": "INSERT",
            "definition": null,
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable delete for document owners and admins",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "documents",
            "command": "DELETE",
            "definition": "((auth.uid() = created_by) OR has_any_group(auth.uid(), ARRAY['ADMIN'::text]))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable read access based on role",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "documents",
            "command": "SELECT",
            "definition": "\nCASE\n    WHEN (required_role IS NULL) THEN true\n    WHEN has_any_group(auth.uid(), ARRAY[(required_role)::text]) THEN true\n    WHEN has_any_group(auth.uid(), ARRAY['ADMIN'::text]) THEN true\n    ELSE false\nEND",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable update for document owners and admins",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "documents",
            "command": "UPDATE",
            "definition": "((auth.uid() = created_by) OR has_any_group(auth.uid(), ARRAY['ADMIN'::text]))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "documents_club_policy",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "documents",
            "command": "ALL",
            "definition": "(club_id IN ( SELECT club_members.club_id\n   FROM club_members\n  WHERE (club_members.user_id = auth.uid())))",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "documents_insert",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "documents",
            "command": "INSERT",
            "definition": null,
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable read access for all users",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "discovery_flight_prices",
            "command": "SELECT",
            "definition": "true",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "Enable service role to manage prices",
            "roles": [
                [
                    "service_role"
                ]
            ],
            "table": "discovery_flight_prices",
            "command": "ALL",
            "definition": "true",
            "permissive": "PERMISSIVE"
        },
        {
            "name": "discovery_flight_prices_club_policy",
            "roles": [
                [
                    "public"
                ]
            ],
            "table": "discovery_flight_prices",
            "command": "ALL",
            "definition": "(club_id IN ( SELECT club_members.club_id\n   FROM club_members\n  WHERE (club_members.user_id = auth.uid())))",
            "permissive": "PERMISSIVE"
        }
    ],
    "functions": [
        {
            "name": "add_club_member",
            "arguments": "p_club_id uuid, p_user_id uuid",
            "definition": "CREATE OR REPLACE FUNCTION public.add_club_member(p_club_id uuid, p_user_id uuid)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nBEGIN\n    INSERT INTO club_members (club_id, user_id)\n    VALUES (p_club_id, p_user_id)\n    ON CONFLICT (club_id, user_id) \n    DO UPDATE SET \n        updated_at = now();\nEND;\n$function$\n",
            "return_type": "void"
        },
        {
            "name": "check_account_entry_type",
            "arguments": "",
            "definition": "CREATE OR REPLACE FUNCTION public.check_account_entry_type()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n    -- Vérifier que le montant correspond au type (crédit/débit)\n    IF EXISTS (\n        SELECT 1 \n        FROM account_entry_types \n        WHERE id = NEW.entry_type_id \n        AND (\n            (is_credit = true AND NEW.amount < 0) OR\n            (is_credit = false AND NEW.amount > 0)\n        )\n    ) THEN\n        RAISE EXCEPTION 'Le montant ne correspond pas au type d''opération (crédit/débit)';\n    END IF;\n    \n    RETURN NEW;\nEND;\n$function$\n",
            "return_type": "trigger"
        },
        {
            "name": "check_auth_tables",
            "arguments": "",
            "definition": "CREATE OR REPLACE FUNCTION public.check_auth_tables()\n RETURNS boolean\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nbegin\n  return exists (\n    select from information_schema.tables \n    where table_schema = 'auth' \n    and table_name = 'users'\n  );\nend;\n$function$\n",
            "return_type": "bool"
        },
        {
            "name": "check_availability_conflicts",
            "arguments": "",
            "definition": "CREATE OR REPLACE FUNCTION public.check_availability_conflicts()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n    -- Check for overlapping availabilities with the same slot_type\n    IF EXISTS (\n        SELECT 1 FROM availabilities\n        WHERE id != COALESCE(NEW.id, '00000000-0000-0000-0000-000000000000')\n        AND (\n            (NEW.user_id IS NOT NULL AND user_id = NEW.user_id) OR\n            (NEW.aircraft_id IS NOT NULL AND aircraft_id = NEW.aircraft_id)\n        )\n        AND slot_type = NEW.slot_type\n        AND (\n            (NEW.start_time, NEW.end_time) OVERLAPS (start_time, end_time)\n        )\n    ) THEN\n        RAISE EXCEPTION 'Availability conflict detected for the same slot type';\n    END IF;\n    \n    RETURN NEW;\nEND;\n$function$\n",
            "return_type": "trigger"
        },
        {
            "name": "check_pilot_availability",
            "arguments": "p_pilot_id uuid, p_date date, p_start_time time without time zone, p_end_time time without time zone",
            "definition": "CREATE OR REPLACE FUNCTION public.check_pilot_availability(p_pilot_id uuid, p_date date, p_start_time time without time zone, p_end_time time without time zone)\n RETURNS boolean\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n  RETURN EXISTS (\n    SELECT 1 FROM pilot_availabilities\n    WHERE pilot_id = p_pilot_id\n    AND day_of_week = EXTRACT(DOW FROM p_date)\n    AND start_time <= p_start_time\n    AND end_time >= p_end_time\n    AND (\n      is_recurring = false\n      OR (\n        is_recurring = true\n        AND start_date <= p_date\n        AND end_date >= p_date\n      )\n    )\n  );\nEND;\n$function$\n",
            "return_type": "bool"
        },
        {
            "name": "check_user_role",
            "arguments": "user_id uuid, required_roles text[]",
            "definition": "CREATE OR REPLACE FUNCTION public.check_user_role(user_id uuid, required_roles text[])\n RETURNS boolean\n LANGUAGE sql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\n  SELECT EXISTS (\n    SELECT 1 \n    FROM auth.users au\n    WHERE au.id = user_id \n    AND (au.raw_user_meta_data->>'role')::text = ANY(required_roles)\n  );\n$function$\n",
            "return_type": "bool"
        },
        {
            "name": "cleanup_orphaned_auth_users",
            "arguments": "",
            "definition": "CREATE OR REPLACE FUNCTION public.cleanup_orphaned_auth_users()\n RETURNS TABLE(deleted_id uuid, email character varying)\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nbegin\n  return query\n  with orphaned_users as (\n    select au.id, au.email\n    from auth.users au\n    left join public.users pu on pu.id = au.id\n    where pu.id is null\n    and au.id != '00000000-0000-0000-0000-000000000000' -- Exclure l'utilisateur système\n  ),\n  deleted_users as (\n    delete from auth.users au\n    using orphaned_users ou\n    where au.id = ou.id\n    returning au.id, au.email\n  )\n  select * from deleted_users;\nend;\n$function$\n",
            "return_type": "record"
        },
        {
            "name": "create_auth_user",
            "arguments": "p_email text, p_login text, p_password text, p_role text, p_user_id uuid, p_user_metadata jsonb DEFAULT '{}'::jsonb",
            "definition": "CREATE OR REPLACE FUNCTION public.create_auth_user(p_email text, p_login text, p_password text, p_role text, p_user_id uuid, p_user_metadata jsonb DEFAULT '{}'::jsonb)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\ndeclare\n    v_uid uuid;\nbegin\n    -- Create the user in auth.users\n    insert into auth.users (\n        instance_id,\n        id,\n        aud,\n        role,\n        email,\n        encrypted_password,\n        email_confirmed_at,\n        recovery_sent_at,\n        last_sign_in_at,\n        raw_app_meta_data,\n        raw_user_meta_data,\n        created_at,\n        updated_at,\n        confirmation_token,\n        email_change,\n        email_change_token_new,\n        recovery_token\n    )\n    values (\n        '00000000-0000-0000-0000-000000000000',\n        p_user_id,\n        'authenticated',\n        'authenticated',\n        p_email,\n        crypt(p_password, gen_salt('bf')),\n        now(),\n        null,\n        now(),\n        jsonb_build_object(\n            'provider', 'email',\n            'providers', array['email']::text[],\n            'role', 'authenticated'\n        ),\n        p_user_metadata,\n        now(),\n        now(),\n        '',\n        '',\n        '',\n        ''\n    )\n    returning id into v_uid;\n\n    -- Insert into auth.identities\n    insert into auth.identities (\n        id,\n        user_id,\n        identity_data,\n        provider,\n        provider_id,\n        last_sign_in_at,\n        created_at,\n        updated_at\n    )\n    values (\n        gen_random_uuid(),\n        v_uid,\n        jsonb_build_object(\n            'sub', v_uid,\n            'email', p_email,\n            'login', p_login,\n            'role', 'authenticated'\n        ),\n        'email',\n        p_email,\n        now(),\n        now(),\n        now()\n    );\n\n    -- Update auth_id in public.users\n    update public.users\n    set auth_id = v_uid\n    where id = p_user_id;\nend;\n$function$\n",
            "return_type": "void"
        },
        {
            "name": "create_club_filter_policy",
            "arguments": "table_name text",
            "definition": "CREATE OR REPLACE FUNCTION public.create_club_filter_policy(table_name text)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n  EXECUTE format('\n    CREATE POLICY \"%I_club_policy\" ON %I\n      USING (\n        club_id IN (\n          SELECT club_id \n          FROM club_members \n          WHERE user_id = auth.uid()\n        )\n      )', table_name, table_name);\nEND;\n$function$\n",
            "return_type": "void"
        },
        {
            "name": "create_club_with_admin",
            "arguments": "p_club_name text, p_club_code text, p_admin_email text, p_admin_password text, p_admin_login text, p_admin_first_name text, p_admin_last_name text",
            "definition": "CREATE OR REPLACE FUNCTION public.create_club_with_admin(p_club_name text, p_club_code text, p_admin_email text, p_admin_password text, p_admin_login text, p_admin_first_name text, p_admin_last_name text)\n RETURNS uuid\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nDECLARE\n  v_club_id uuid;\n  v_user_id uuid;\n  v_existing_user_id uuid;\nBEGIN\n  -- Check if email already exists\n  SELECT id INTO v_existing_user_id\n  FROM public.users\n  WHERE email = p_admin_email;\n\n  IF v_existing_user_id IS NOT NULL THEN\n    RAISE EXCEPTION 'Un utilisateur avec cet email existe déjà';\n  END IF;\n\n  -- Validate club code format\n  IF NOT p_club_code ~ '^[A-Za-z0-9]{3,10}$' THEN\n    RAISE EXCEPTION 'Le code de l''aérodrome doit contenir entre 3 et 10 caractères alphanumériques';\n  END IF;\n\n  -- Create the club\n  INSERT INTO public.clubs (name, code)\n  VALUES (p_club_name, upper(p_club_code))\n  RETURNING id INTO v_club_id;\n\n  -- 1. Create user in public.users\n  INSERT INTO public.users (\n    first_name,\n    last_name,\n    email,\n    login,\n    created_at,\n    updated_at\n  )\n  VALUES (\n    p_admin_first_name,\n    p_admin_last_name,\n    p_admin_email,\n    p_admin_login,\n    NOW(),\n    NOW()\n  )\n  RETURNING id INTO v_user_id;\n\n  -- 2. Create auth user\n  PERFORM create_auth_user(\n    p_email := p_admin_email,\n    p_password := p_admin_password,\n    p_role := 'ADMIN',\n    p_login := p_admin_login,\n    p_user_id := v_user_id\n  );\n\n  -- 3. Update user groups to add admin role\n  PERFORM update_user_groups(\n    p_user_id := v_user_id,\n    p_groups := ARRAY['ADMIN']::text[]\n  );\n\n  -- 4. Add admin as club member\n  INSERT INTO club_members (\n    user_id,\n    club_id,\n    joined_at\n  )\n  VALUES (\n    v_user_id,\n    v_club_id,\n    NOW()\n  );\n\n  RETURN v_club_id;\n\nEXCEPTION WHEN OTHERS THEN\n  -- If any error occurs, clean up by deleting the club if it was created\n  IF v_club_id IS NOT NULL THEN\n    DELETE FROM public.clubs WHERE id = v_club_id;\n  END IF;\n  -- And the user if it was created\n  IF v_user_id IS NOT NULL THEN\n    DELETE FROM public.users WHERE id = v_user_id;\n  END IF;\n  RAISE;\nEND;\n$function$\n",
            "return_type": "uuid"
        },
        {
            "name": "create_flight_with_account",
            "arguments": "flight_data jsonb, account_data jsonb",
            "definition": "CREATE OR REPLACE FUNCTION public.create_flight_with_account(flight_data jsonb, account_data jsonb)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n  flight_id uuid;\nBEGIN\n  -- Log les données reçues\n  RAISE NOTICE 'Flight data: %', flight_data;\n  RAISE NOTICE 'Account data: %', account_data;\n\n  -- Insérer le vol et récupérer son ID\n  INSERT INTO flights (\n    id,\n    reservation_id,\n    user_id,\n    aircraft_id,\n    flight_type_id,\n    instructor_id,\n    date,\n    duration,\n    destination,\n    hourly_rate,\n    cost,\n    payment_method,\n    is_validated,\n    created_at,\n    updated_at\n  )\n  SELECT \n    (flight_data->>'id')::uuid,\n    NULLIF(flight_data->>'reservation_id', '')::uuid,\n    (flight_data->>'user_id')::uuid,\n    (flight_data->>'aircraft_id')::uuid,\n    flight_data->>'flight_type_id',\n    NULLIF(flight_data->>'instructor_id', '')::uuid,\n    (flight_data->>'date')::timestamp with time zone,\n    (flight_data->>'duration')::integer,\n    NULLIF(flight_data->>'destination', ''),\n    (flight_data->>'hourly_rate')::decimal,\n    (flight_data->>'cost')::decimal,\n    flight_data->>'payment_method',\n    (flight_data->>'is_validated')::boolean,\n    (flight_data->>'created_at')::timestamp with time zone,\n    (flight_data->>'updated_at')::timestamp with time zone\n  RETURNING id INTO flight_id;\n  \n  -- Log l'ID du vol créé\n  RAISE NOTICE 'Created flight with ID: %', flight_id;\n  \n  -- Insérer l'entrée comptable avec la description fournie\n  INSERT INTO account_entries (\n    id,\n    user_id,\n    date,\n    type,\n    amount,\n    payment_method,\n    description,\n    is_validated,\n    created_at,\n    updated_at\n  )\n  SELECT \n    (account_data->>'id')::uuid,\n    (account_data->>'user_id')::uuid,\n    (account_data->>'date')::timestamp with time zone,\n    account_data->>'type',\n    (account_data->>'amount')::decimal,\n    account_data->>'payment_method',\n    account_data->>'description',\n    (account_data->>'is_validated')::boolean,\n    (account_data->>'created_at')::timestamp with time zone,\n    (account_data->>'updated_at')::timestamp with time zone;\n\n  -- Log le succès\n  RAISE NOTICE 'Successfully created flight and account entry';\nEND;\n$function$\n",
            "return_type": "void"
        },
        {
            "name": "create_flight_with_account_and_update",
            "arguments": "flight_data jsonb, account_data jsonb, new_total_hours numeric, new_hours_before_maintenance numeric",
            "definition": "CREATE OR REPLACE FUNCTION public.create_flight_with_account_and_update(flight_data jsonb, account_data jsonb, new_total_hours numeric, new_hours_before_maintenance numeric)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n  flight_id uuid;\nBEGIN\n  -- Insérer le vol\n  INSERT INTO flights (\n    id,\n    reservation_id,\n    user_id,\n    aircraft_id,\n    flight_type_id,\n    instructor_id,\n    date,\n    duration,\n    destination,\n    hourly_rate,\n    cost,\n    payment_method,\n    is_validated,\n    created_at,\n    updated_at\n  )\n  SELECT \n    (flight_data->>'id')::uuid,\n    NULLIF(flight_data->>'reservation_id', '')::uuid,\n    (flight_data->>'user_id')::uuid,\n    (flight_data->>'aircraft_id')::uuid,\n    flight_data->>'flight_type_id',\n    NULLIF(flight_data->>'instructor_id', '')::uuid,\n    (flight_data->>'date')::timestamp with time zone,\n    (flight_data->>'duration')::integer,\n    NULLIF(flight_data->>'destination', ''),\n    (flight_data->>'hourly_rate')::decimal,\n    (flight_data->>'cost')::decimal,\n    flight_data->>'payment_method',\n    (flight_data->>'is_validated')::boolean,\n    (flight_data->>'created_at')::timestamp with time zone,\n    (flight_data->>'updated_at')::timestamp with time zone;\n\n  -- Mettre à jour les heures de l'appareil\n  UPDATE aircraft \n  SET \n    total_flight_hours = new_total_hours,\n    hours_before_maintenance = new_hours_before_maintenance\n  WHERE id = (flight_data->>'aircraft_id')::uuid;\n  \n  -- Insérer l'entrée comptable\n  INSERT INTO account_entries (\n    id,\n    user_id,\n    date,\n    type,\n    amount,\n    payment_method,\n    description,\n    is_validated,\n    created_at,\n    updated_at\n  )\n  SELECT \n    (account_data->>'id')::uuid,\n    (account_data->>'user_id')::uuid,\n    (account_data->>'date')::timestamp with time zone,\n    account_data->>'type',\n    (account_data->>'amount')::decimal,\n    account_data->>'payment_method',\n    account_data->>'description',\n    (account_data->>'is_validated')::boolean,\n    (account_data->>'created_at')::timestamp with time zone,\n    (account_data->>'updated_at')::timestamp with time zone;\nEND;\n$function$\n",
            "return_type": "void"
        },
        {
            "name": "create_instructor_student_chat",
            "arguments": "instructor_id uuid, student_id uuid",
            "definition": "CREATE OR REPLACE FUNCTION public.create_instructor_student_chat(instructor_id uuid, student_id uuid)\n RETURNS uuid\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nDECLARE\n    room_id uuid;\nBEGIN\n    -- Check if instructor is actually an instructor\n    IF NOT EXISTS (\n        SELECT 1 FROM users \n        WHERE id = instructor_id AND role = 'INSTRUCTOR'\n    ) THEN\n        RAISE EXCEPTION 'Invalid instructor ID';\n    END IF;\n    \n    -- Create the chat room\n    INSERT INTO chat_rooms (name, type)\n    VALUES (\n        'Chat instructeur-élève',\n        'INSTRUCTOR_STUDENT'\n    )\n    RETURNING id INTO room_id;\n    \n    -- Add both users to the room\n    INSERT INTO chat_room_members (room_id, user_id)\n    VALUES\n        (room_id, instructor_id),\n        (room_id, student_id);\n        \n    RETURN room_id;\nEND;\n$function$\n",
            "return_type": "uuid"
        },
        {
            "name": "delete_auth_user",
            "arguments": "",
            "definition": "CREATE OR REPLACE FUNCTION public.delete_auth_user()\n RETURNS trigger\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nbegin\n  -- Supprimer l'utilisateur de auth.users\n  delete from auth.users where id = old.id;\n  return old;\nexception\n  when others then\n    -- Log l'erreur mais ne bloque pas la suppression\n    raise warning 'Erreur lors de la suppression de l''utilisateur dans auth.users: %', SQLERRM;\n    return old;\nend;\n$function$\n",
            "return_type": "trigger"
        },
        {
            "name": "delete_chat_room",
            "arguments": "room_id uuid",
            "definition": "CREATE OR REPLACE FUNCTION public.delete_chat_room(room_id uuid)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nBEGIN\n  -- Delete all messages in the room\n  DELETE FROM chat_messages WHERE chat_messages.room_id = $1;\n  \n  -- Delete all room members\n  DELETE FROM chat_room_members WHERE chat_room_members.room_id = $1;\n  \n  -- Delete the room itself\n  DELETE FROM chat_rooms WHERE chat_rooms.id = $1;\nEND;\n$function$\n",
            "return_type": "void"
        },
        {
            "name": "delete_flight_with_entries",
            "arguments": "p_flight_id uuid",
            "definition": "CREATE OR REPLACE FUNCTION public.delete_flight_with_entries(p_flight_id uuid)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nBEGIN\n    -- Supprimer d'abord les entrées comptables associées\n    DELETE FROM account_entries WHERE flight_id = p_flight_id;\n    \n    -- Puis supprimer le vol\n    DELETE FROM flights WHERE id = p_flight_id;\nEND;\n$function$\n",
            "return_type": "void"
        },
        {
            "name": "drop_auth_constraint",
            "arguments": "",
            "definition": "CREATE OR REPLACE FUNCTION public.drop_auth_constraint()\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nbegin\n  -- Supprimer la contrainte de public.users vers auth.users\n  alter table public.users drop constraint if exists users_auth_id_fkey;\n  \n  -- Supprimer la contrainte de auth.identities vers auth.users\n  alter table auth.identities drop constraint if exists identities_user_id_fkey;\n  \n  -- Supprimer autres contraintes potentielles\n  alter table auth.sessions drop constraint if exists sessions_user_id_fkey;\n  alter table auth.mfa_factors drop constraint if exists mfa_factors_user_id_fkey;\n  alter table auth.refresh_tokens drop constraint if exists refresh_tokens_user_id_fkey;\nend;\n$function$\n",
            "return_type": "void"
        },
        {
            "name": "execute_sql",
            "arguments": "query text",
            "definition": "CREATE OR REPLACE FUNCTION public.execute_sql(query text)\n RETURNS json\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\ndeclare\n  result json;\n  current_user_id uuid;\nbegin\n  -- Récupérer l'ID de l'utilisateur courant\n  current_user_id := auth.uid();\n  \n  -- Log pour debug\n  raise notice 'Current user ID: %', current_user_id;\n  \n  -- Remplacer les occurrences de auth.uid() dans la requête\n  query := replace(query, 'auth.uid()', '''' || current_user_id || '''::uuid');\n  \n  -- Exécuter la requête modifiée\n  execute format('select json_agg(t) from (%s) t', query) into result;\n  \n  return coalesce(result, '[]'::json);\nexception when others then\n  return json_build_object(\n    'error', SQLERRM,\n    'detail', SQLSTATE,\n    'query', query,\n    'user_id', current_user_id\n  );\nend;\n$function$\n",
            "return_type": "json"
        },
        {
            "name": "generate_instructor_invoice",
            "arguments": "instructor_id uuid, start_date date, end_date date",
            "definition": "CREATE OR REPLACE FUNCTION public.generate_instructor_invoice(instructor_id uuid, start_date date, end_date date)\n RETURNS uuid\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n    v_invoice_id uuid;\nBEGIN\n    -- Créer la facture\n    INSERT INTO instructor_invoices (\n        instructor_id,\n        start_date,\n        end_date,\n        status,\n        created_at,\n        updated_at\n    )\n    VALUES (\n        instructor_id,\n        start_date,\n        end_date,\n        'DRAFT',\n        NOW(),\n        NOW()\n    )\n    RETURNING id INTO v_invoice_id;\n\n    -- Insérer les détails de la facture\n    -- Ne prendre que les vols qui n'ont pas de facture ou dont la facture n'est pas validée\n    INSERT INTO instructor_invoice_details (\n        invoice_id,\n        flight_id,\n        amount,\n        created_at,\n        updated_at\n    )\n    SELECT \n        v_invoice_id,\n        f.id,\n        f.cost * 0.5, -- 50% du coût du vol pour l'instructeur\n        NOW(),\n        NOW()\n    FROM flights f\n    LEFT JOIN instructor_invoice_details iid ON f.id = iid.flight_id\n    LEFT JOIN instructor_invoices ii ON iid.invoice_id = ii.id\n    WHERE \n        f.instructor_id = instructor_id\n        AND f.date BETWEEN start_date AND end_date\n        AND (\n            iid.id IS NULL -- Vol pas encore facturé\n            OR (\n                ii.status != 'VALIDATED' -- Ou facture existante non validée\n                AND ii.id != v_invoice_id -- Éviter de dupliquer les vols de la facture en cours\n            )\n        );\n\n    RETURN v_invoice_id;\nEND;\n$function$\n",
            "return_type": "uuid"
        },
        {
            "name": "get_auth_user_id",
            "arguments": "p_email text",
            "definition": "CREATE OR REPLACE FUNCTION public.get_auth_user_id(p_email text)\n RETURNS TABLE(id uuid)\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nbegin\n  return query\n  select users.id\n  from auth.users\n  where users.email = p_email;\nend;\n$function$\n",
            "return_type": "uuid"
        },
        {
            "name": "get_financial_stats",
            "arguments": "start_date timestamp with time zone, end_date timestamp with time zone",
            "definition": "CREATE OR REPLACE FUNCTION public.get_financial_stats(start_date timestamp with time zone, end_date timestamp with time zone)\n RETURNS json\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nDECLARE\n    result json;\n    current_club_id uuid;\nBEGIN\n    -- Tentez d'obtenir le club_id de l'utilisateur connecté\n    SELECT club_id INTO current_club_id\n    FROM club_members\n    WHERE user_id = auth.uid()\n    LIMIT 1;\n\n    -- Si un club_id est trouvé, appliquez le filtre, sinon retournez toutes les données\n    WITH RECURSIVE months AS (\n        SELECT date_trunc('month', start_date) as month\n        UNION ALL\n        SELECT date_trunc('month', month + interval '1 month')\n        FROM months\n        WHERE month < date_trunc('month', end_date)\n    ),\n    monthly_stats AS (\n        SELECT\n            m.month,\n            COALESCE(SUM(CASE \n                WHEN aet.is_credit THEN ae.amount \n                ELSE 0 \n            END), 0) AS revenue,\n            COALESCE(SUM(CASE \n                WHEN NOT aet.is_credit THEN ae.amount\n                ELSE 0 \n            END), 0) AS expenses\n        FROM months m\n        LEFT JOIN account_entries ae ON date_trunc('month', ae.date) = m.month\n            AND ae.is_validated = true\n            AND (current_club_id IS NULL OR ae.club_id = current_club_id)\n        LEFT JOIN account_entry_types aet ON ae.entry_type_id = aet.id\n        GROUP BY m.month\n    )\n    SELECT json_build_object(\n        'monthly_stats', (\n            SELECT json_agg(\n                json_build_object(\n                    'month', month,\n                    'revenue', revenue,\n                    'expenses', expenses\n                )\n            ) FROM monthly_stats\n        )\n    ) INTO result;\n\n    RETURN result;\nEND;\n$function$\n",
            "return_type": "json"
        },
        {
            "name": "get_financial_stats",
            "arguments": "p_club_id uuid, start_date timestamp with time zone, end_date timestamp with time zone",
            "definition": "CREATE OR REPLACE FUNCTION public.get_financial_stats(p_club_id uuid, start_date timestamp with time zone, end_date timestamp with time zone)\n RETURNS json\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nDECLARE\n    result json;\nBEGIN\n    WITH RECURSIVE months AS (\n        SELECT date_trunc('month', start_date) as month\n        UNION ALL\n        SELECT date_trunc('month', month + interval '1 month')\n        FROM months\n        WHERE month < date_trunc('month', end_date)\n    ),\n    monthly_stats AS (\n        SELECT\n            m.month,\n            COALESCE(SUM(CASE \n                WHEN aet.is_credit THEN ae.amount \n                ELSE 0 \n            END), 0) AS revenue,\n            COALESCE(SUM(CASE \n                WHEN NOT aet.is_credit THEN ae.amount\n                ELSE 0 \n            END), 0) AS expenses\n        FROM months m\n        LEFT JOIN account_entries ae ON date_trunc('month', ae.date) = m.month\n            AND ae.is_validated = true\n            AND ae.club_id = p_club_id\n        LEFT JOIN account_entry_types aet ON ae.entry_type_id = aet.id\n        GROUP BY m.month\n    ),\n    payment_methods AS (\n        SELECT\n            ae.payment_method,\n            COUNT(*) as count,\n            SUM(CASE \n                WHEN aet.is_credit THEN ae.amount\n                ELSE -ae.amount\n            END) as total\n        FROM account_entries ae\n        LEFT JOIN account_entry_types aet ON ae.entry_type_id = aet.id\n        WHERE ae.date BETWEEN start_date AND end_date\n        AND ae.is_validated = true\n        AND ae.club_id = p_club_id\n        GROUP BY ae.payment_method\n    ),\n    entry_types AS (\n        SELECT\n            aet.code,\n            aet.name,\n            aet.is_credit,\n            COUNT(*) as count,\n            SUM(ae.amount) as total,\n            MIN(ae.amount) as min_amount,\n            MAX(ae.amount) as max_amount\n        FROM account_entries ae\n        LEFT JOIN account_entry_types aet ON ae.entry_type_id = aet.id\n        WHERE ae.date BETWEEN start_date AND end_date\n        AND ae.is_validated = true\n        AND ae.club_id = p_club_id\n        GROUP BY aet.code, aet.name, aet.is_credit\n    )\n    SELECT json_build_object(\n        'total_revenue', COALESCE((\n            SELECT SUM(revenue)\n            FROM monthly_stats\n        ), 0),\n        'total_expenses', COALESCE((\n            SELECT SUM(expenses)\n            FROM monthly_stats\n        ), 0),\n        'monthly_stats', COALESCE((\n            SELECT json_agg(\n                json_build_object(\n                    'month', trim(to_char(month, 'Month YYYY')),\n                    'revenue', revenue,\n                    'expenses', expenses,\n                    'total', revenue + expenses\n                )\n                ORDER BY month DESC\n            )\n            FROM monthly_stats\n        ), '[]'::json),\n        'payment_methods', COALESCE((\n            SELECT json_agg(\n                json_build_object(\n                    'method', payment_method,\n                    'count', count,\n                    'total', total\n                )\n                ORDER BY payment_method\n            )\n            FROM payment_methods\n        ), '[]'::json),\n        'entry_types', COALESCE((\n            SELECT json_agg(\n                json_build_object(\n                    'code', code,\n                    'name', name,\n                    'is_credit', is_credit,\n                    'count', count,\n                    'total', total,\n                    'min_amount', min_amount,\n                    'max_amount', max_amount\n                )\n                ORDER BY is_credit DESC, total DESC\n            )\n            FROM entry_types\n        ), '[]'::json)\n    ) INTO result;\n\n    RETURN result;\nEND;\n$function$\n",
            "return_type": "json"
        },
        {
            "name": "get_financial_stats_last_12_months",
            "arguments": "",
            "definition": "CREATE OR REPLACE FUNCTION public.get_financial_stats_last_12_months()\n RETURNS json\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$DECLARE\n    result json;\nBEGIN\n    WITH revenue_by_type AS (\n        SELECT \n            aet.code as type,\n            aet.name as type_name,\n            SUM(ae.amount) as total\n        FROM account_entries ae\n        JOIN account_entry_types aet ON ae.entry_type_id = aet.id\n        WHERE ae.created_at >= NOW() - INTERVAL '12 months'\n        AND aet.is_credit = true\n        -- Ajout du filtre par club\n        AND ae.club_id IN (\n            SELECT club_members.club_id\n            FROM club_members\n            WHERE club_members.user_id = auth.uid()\n        )\n        GROUP BY aet.code, aet.name\n    ),\n    monthly_revenue AS (\n        SELECT \n            date_trunc('month', ae.created_at) as month,\n            aet.code as type,\n            SUM(ae.amount) as total\n        FROM account_entries ae\n        JOIN account_entry_types aet ON ae.entry_type_id = aet.id\n        WHERE ae.created_at >= NOW() - INTERVAL '12 months'\n        AND aet.is_credit = true\n        -- Ajout du filtre par club\n        AND ae.club_id IN (\n            SELECT club_members.club_id\n            FROM club_members\n            WHERE club_members.user_id = auth.uid()\n        )\n        GROUP BY date_trunc('month', ae.created_at), aet.code\n        ORDER BY month DESC\n    )\n    SELECT json_build_object(\n        'total_revenue', (\n            SELECT SUM(total)\n            FROM revenue_by_type\n        ),\n        'revenue_by_type', (\n            SELECT json_agg(\n                json_build_object(\n                    'type', type,\n                    'name', type_name,\n                    'total', total\n                )\n            )\n            FROM revenue_by_type\n        ),\n        'monthly_revenue', (\n            SELECT json_agg(\n                json_build_object(\n                    'month', to_char(month, 'YYYY-MM'),\n                    'type', type,\n                    'total', total\n                )\n            )\n            FROM monthly_revenue\n        )\n    ) INTO result;\n\n    RETURN result;\nEND;$function$\n",
            "return_type": "json"
        },
        {
            "name": "get_flights_by_aircraft",
            "arguments": "start_date timestamp without time zone, end_date timestamp without time zone",
            "definition": "CREATE OR REPLACE FUNCTION public.get_flights_by_aircraft(start_date timestamp without time zone, end_date timestamp without time zone)\n RETURNS TABLE(registration text, total_hours double precision)\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n  RETURN QUERY\n  SELECT \n    a.registration,\n    CAST(SUM(f.duration) AS double precision) / 60.0 as total_hours\n  FROM flights f\n  JOIN aircraft a ON f.aircraft_id = a.id\n  WHERE f.date BETWEEN start_date AND end_date\n  GROUP BY a.registration\n  ORDER BY total_hours DESC;\nEND;\n$function$\n",
            "return_type": "record"
        },
        {
            "name": "get_flights_by_instructor",
            "arguments": "start_date timestamp without time zone, end_date timestamp without time zone",
            "definition": "CREATE OR REPLACE FUNCTION public.get_flights_by_instructor(start_date timestamp without time zone, end_date timestamp without time zone)\n RETURNS TABLE(instructor_name text, total_hours double precision)\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n  RETURN QUERY\n  SELECT \n    CONCAT(u.first_name, ' ', u.last_name) as instructor_name,\n    CAST(SUM(f.duration) AS double precision) / 60.0 as total_hours\n  FROM flights f\n  JOIN users u ON f.instructor_id = u.id\n  WHERE f.date BETWEEN start_date AND end_date\n  GROUP BY u.id, u.first_name, u.last_name\n  ORDER BY total_hours DESC;\nEND;\n$function$\n",
            "return_type": "record"
        },
        {
            "name": "get_flights_by_type",
            "arguments": "start_date timestamp without time zone, end_date timestamp without time zone",
            "definition": "CREATE OR REPLACE FUNCTION public.get_flights_by_type(start_date timestamp without time zone, end_date timestamp without time zone)\n RETURNS TABLE(type_name text, total_hours double precision)\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n  RETURN QUERY\n  SELECT \n    ft.name as type_name,\n    CAST(SUM(f.duration) AS double precision) / 60.0 as total_hours\n  FROM flights f\n  JOIN flight_types ft ON f.flight_type_id = ft.id\n  WHERE f.date BETWEEN start_date AND end_date\n  GROUP BY ft.id, ft.name\n  ORDER BY total_hours DESC;\nEND;\n$function$\n",
            "return_type": "record"
        },
        {
            "name": "get_flights_with_instructor",
            "arguments": "start_date timestamp with time zone, end_date timestamp with time zone",
            "definition": "CREATE OR REPLACE FUNCTION public.get_flights_with_instructor(start_date timestamp with time zone, end_date timestamp with time zone)\n RETURNS TABLE(month text, has_instructor text, flight_type text, flight_type_code text, display_order integer, total_hours numeric)\n LANGUAGE plpgsql\nAS $function$\nbegin\n    return query\n    select \n        to_char(date_trunc('month', f.date), 'YYYY-MM') as month,\n        case when f.instructor_id is not null then 'Avec instructeur' else 'Sans instructeur' end as has_instructor,\n        ft.name as flight_type,\n        ft.code as flight_type_code,\n        ft.display_order,\n        round(sum(f.duration::numeric / 60), 1) as total_hours\n    from flights f\n    join flight_types ft on f.flight_type_id = ft.id\n    where f.date >= start_date\n    and f.date <= end_date\n    and f.is_validated = true\n    group by \n        date_trunc('month', f.date),\n        case when f.instructor_id is not null then 'Avec instructeur' else 'Sans instructeur' end,\n        ft.name,\n        ft.code,\n        ft.display_order\n    order by month, display_order;\nend;\n$function$\n",
            "return_type": "record"
        },
        {
            "name": "get_functions_info",
            "arguments": "",
            "definition": "CREATE OR REPLACE FUNCTION public.get_functions_info()\n RETURNS jsonb\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nBEGIN\n  RETURN (\n    SELECT jsonb_agg(\n      jsonb_build_object(\n        'name', p.proname,\n        'arguments', pg_get_function_arguments(p.oid),\n        'return_type', t.typname,\n        'definition', pg_get_functiondef(p.oid)\n      )\n    )\n    FROM pg_proc p\n    JOIN pg_type t ON p.prorettype = t.oid\n    WHERE p.pronamespace = 'public'::regnamespace\n  );\nEND;\n$function$\n",
            "return_type": "jsonb"
        },
        {
            "name": "get_maintenance_stats",
            "arguments": "",
            "definition": "CREATE OR REPLACE FUNCTION public.get_maintenance_stats()\n RETURNS json\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nDECLARE\n    result json;\nBEGIN\n    WITH member_club AS (\n        SELECT club_id\n        FROM club_members\n        WHERE user_id = auth.uid()\n        LIMIT 1\n    ),\n    flight_stats AS (\n        SELECT \n            a.id AS aircraft_id,\n            COUNT(f.id) AS total_flights_30d,\n            COALESCE(SUM(f.duration) / 60.0, 0) AS total_hours_30d,\n            MAX(f.date) AS last_flight\n        FROM aircraft a\n        LEFT JOIN flights f ON a.id = f.aircraft_id\n            AND f.date >= CURRENT_DATE - INTERVAL '30 days'\n            AND f.is_validated = TRUE\n        WHERE a.club_id = (SELECT club_id FROM member_club)\n        GROUP BY a.id\n    ),\n    maintenance_alerts AS (\n        SELECT\n            a.id,\n            a.registration,\n            a.name,\n            a.type AS model,\n            a.total_flight_hours,\n            a.hours_before_maintenance,\n            a.last_maintenance,\n            a.status,\n            CASE \n                WHEN (a.hours_before_maintenance <= 0) THEN 'OVERDUE'\n                WHEN (a.hours_before_maintenance <= 10) THEN 'URGENT'\n                WHEN (a.hours_before_maintenance <= 25) THEN 'WARNING'\n                ELSE 'OK'\n            END AS maintenance_status\n        FROM aircraft a\n        WHERE a.club_id = (SELECT club_id FROM member_club)\n    )\n    SELECT json_build_object(\n        'aircraft_stats', (\n            SELECT json_agg(\n                json_build_object(\n                    'id', ma.id,\n                    'registration', ma.registration,\n                    'name', ma.name,\n                    'model', ma.model,\n                    'total_hours', ma.total_flight_hours,\n                    'hours_before_maintenance', ma.hours_before_maintenance,\n                    'last_maintenance', ma.last_maintenance,\n                    'status', ma.status,\n                    'maintenance_status', ma.maintenance_status,\n                    'total_flights_30d', COALESCE(fs.total_flights_30d, 0),\n                    'total_hours_30d', COALESCE(fs.total_hours_30d, 0),\n                    'last_flight', fs.last_flight\n                )\n            )\n            FROM maintenance_alerts ma\n            LEFT JOIN flight_stats fs ON ma.id = fs.aircraft_id\n        ),\n        'alerts_count', (\n            SELECT json_build_object(\n                'overdue', COUNT(*) FILTER (WHERE ma.maintenance_status = 'OVERDUE'),\n                'urgent', COUNT(*) FILTER (WHERE ma.maintenance_status = 'URGENT'),\n                'warning', COUNT(*) FILTER (WHERE ma.maintenance_status = 'WARNING'),\n                'ok', COUNT(*) FILTER (WHERE ma.maintenance_status = 'OK')\n            )\n            FROM maintenance_alerts ma\n        )\n    ) INTO result;\n\n    RETURN result;\nEND;\n$function$\n",
            "return_type": "json"
        },
        {
            "name": "get_member_stats",
            "arguments": "",
            "definition": "CREATE OR REPLACE FUNCTION public.get_member_stats()\n RETURNS json\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nDECLARE\n    result json;\n    current_club_id uuid;\nBEGIN\n    -- Tentez d'obtenir le club_id de l'utilisateur connecté\n    SELECT club_id INTO current_club_id\n    FROM club_members\n    WHERE user_id = auth.uid()\n    LIMIT 1;\n\n    -- Si un club_id est trouvé, appliquez le filtre, sinon retournez toutes les données\n    SELECT json_build_object(\n        'active_members', (\n            SELECT COUNT(*)\n            FROM club_members cm\n            JOIN member_contributions mc ON cm.user_id = mc.user_id\n            WHERE mc.valid_until >= CURRENT_DATE\n              AND (current_club_id IS NULL OR cm.club_id = current_club_id)\n        ),\n        'expiring_memberships', (\n            SELECT json_agg(\n                json_build_object(\n                    'id', u.id,\n                    'first_name', u.first_name,\n                    'last_name', u.last_name,\n                    'expiry_date', mc.valid_until\n                )\n            )\n            FROM users u\n            JOIN member_contributions mc ON u.id = mc.user_id\n            JOIN club_members cm ON u.id = cm.user_id\n            WHERE mc.valid_until BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '30 days'\n              AND (current_club_id IS NULL OR cm.club_id = current_club_id)\n        ),\n        'qualification_stats', (\n            SELECT json_build_object(\n                'expired', COUNT(*) FILTER (WHERE pq.expires_at < CURRENT_DATE),\n                'expiring_soon', COUNT(*) FILTER (WHERE pq.expires_at BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '30 days'),\n                'expiring_details', json_agg(\n                    json_build_object(\n                        'pilot_id', u.id,\n                        'first_name', u.first_name,\n                        'last_name', u.last_name,\n                        'qualification', qt.name,\n                        'expiry_date', pq.expires_at\n                    )\n                ) FILTER (WHERE pq.expires_at BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '30 days')\n            )\n            FROM pilot_qualifications pq\n            JOIN users u ON pq.pilot_id = u.id\n            JOIN qualification_types qt ON pq.qualification_type_id = qt.id\n            JOIN club_members cm ON u.id = cm.user_id\n            WHERE pq.expires_at IS NOT NULL\n              AND (current_club_id IS NULL OR cm.club_id = current_club_id)\n        ),\n        'medical_stats', (\n            SELECT json_build_object(\n                'expired', COUNT(*) FILTER (WHERE m.expires_at < CURRENT_DATE),\n                'expiring_soon', COUNT(*) FILTER (WHERE m.expires_at BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '30 days'),\n                'expiring_details', json_agg(\n                    json_build_object(\n                        'pilot_id', u.id,\n                        'first_name', u.first_name,\n                        'last_name', u.last_name,\n                        'expiry_date', m.expires_at\n                    )\n                ) FILTER (WHERE m.expires_at BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '30 days')\n            )\n            FROM medicals m\n            JOIN users u ON m.user_id = u.id\n            JOIN club_members cm ON u.id = cm.user_id\n            WHERE m.expires_at IS NOT NULL\n              AND (current_club_id IS NULL OR cm.club_id = current_club_id)\n        )\n    ) INTO result;\n\n    RETURN result;\nEND;\n$function$\n",
            "return_type": "json"
        },
        {
            "name": "get_member_stats",
            "arguments": "p_club_id uuid",
            "definition": "CREATE OR REPLACE FUNCTION public.get_member_stats(p_club_id uuid)\n RETURNS json\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nDECLARE\n    result json;\nBEGIN\n    WITH active_members AS (\n        SELECT DISTINCT mc.user_id\n        FROM member_contributions mc\n        JOIN club_members cm ON mc.user_id = cm.user_id\n        WHERE mc.valid_until >= CURRENT_DATE\n        AND cm.club_id = p_club_id\n    ),\n    expiring_soon AS (\n        SELECT \n            u.id,\n            u.first_name,\n            u.last_name,\n            mc.valid_until as expiry_date\n        FROM users u\n        JOIN member_contributions mc ON u.id = mc.user_id\n        JOIN club_members cm ON u.id = cm.user_id\n        WHERE mc.valid_until BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '30 days'\n        AND cm.club_id = p_club_id\n        AND NOT EXISTS (\n            SELECT 1 \n            FROM member_contributions mc2\n            WHERE mc2.user_id = u.id\n            AND mc2.valid_until > mc.valid_until\n        )\n    ),\n    qualification_stats AS (\n        SELECT\n            COUNT(*) FILTER (WHERE pq.expires_at < CURRENT_DATE) as expired_qualifications,\n            COUNT(*) FILTER (WHERE pq.expires_at BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '30 days') as expiring_qualifications,\n            json_agg(\n                json_build_object(\n                    'pilot_id', u.id,\n                    'first_name', u.first_name,\n                    'last_name', u.last_name,\n                    'qualification', qt.name,\n                    'expiry_date', pq.expires_at\n                )\n            ) FILTER (WHERE pq.expires_at BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '30 days') as expiring_details\n        FROM pilot_qualifications pq\n        JOIN users u ON pq.pilot_id = u.id\n        JOIN club_members cm ON u.id = cm.user_id\n        JOIN qualification_types qt ON pq.qualification_type_id = qt.id\n        WHERE pq.expires_at IS NOT NULL\n        AND cm.club_id = p_club_id\n    ),\n    medical_stats AS (\n        SELECT\n            COUNT(*) FILTER (WHERE m.expires_at < CURRENT_DATE) as expired_medicals,\n            COUNT(*) FILTER (WHERE m.expires_at BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '30 days') as expiring_medicals,\n            json_agg(\n                json_build_object(\n                    'pilot_id', u.id,\n                    'first_name', u.first_name,\n                    'last_name', u.last_name,\n                    'expiry_date', m.expires_at\n                )\n            ) FILTER (WHERE m.expires_at BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '30 days') as expiring_details\n        FROM medicals m\n        JOIN users u ON m.user_id = u.id\n        JOIN club_members cm ON u.id = cm.user_id\n        WHERE m.expires_at IS NOT NULL\n        AND cm.club_id = p_club_id\n    )\n    SELECT json_build_object(\n        'active_members', (SELECT COUNT(*) FROM active_members),\n        'expiring_soon', (\n            SELECT json_agg(\n                json_build_object(\n                    'id', id,\n                    'first_name', first_name,\n                    'last_name', last_name,\n                    'expiry_date', expiry_date\n                )\n            )\n            FROM expiring_soon\n        ),\n        'qualification_stats', (\n            SELECT json_build_object(\n                'expired', expired_qualifications,\n                'expiring', expiring_qualifications,\n                'expiring_details', COALESCE(expiring_details, '[]'::json)\n            )\n            FROM qualification_stats\n        ),\n        'medical_stats', (\n            SELECT json_build_object(\n                'expired', expired_medicals,\n                'expiring', expiring_medicals,\n                'expiring_details', COALESCE(expiring_details, '[]'::json)\n            )\n            FROM medical_stats\n        )\n    ) INTO result;\n\n    RETURN result;\nEND;\n$function$\n",
            "return_type": "json"
        },
        {
            "name": "get_monthly_account_summary",
            "arguments": "p_year integer DEFAULT (EXTRACT(year FROM CURRENT_DATE))::integer",
            "definition": "CREATE OR REPLACE FUNCTION public.get_monthly_account_summary(p_year integer DEFAULT (EXTRACT(year FROM CURRENT_DATE))::integer)\n RETURNS TABLE(month_name text, entry_type_code text, entry_type_name text, total_amount numeric)\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n  RETURN QUERY\n  WITH months AS (\n    SELECT TO_CHAR(DATE_TRUNC('month', (p_year || '-' || m || '-01')::date), 'Month') as month_name,\n           m as month_number\n    FROM generate_series(1,12) m\n  )\n  SELECT \n    m.month_name,\n    aet.code as entry_type_code,\n    aet.name as entry_type_name,\n    COALESCE(ABS(SUM(ae.amount)), 0) as total_amount\n  FROM months m\n  CROSS JOIN account_entry_types aet\n  LEFT JOIN account_entries ae ON \n    EXTRACT(MONTH FROM ae.date) = m.month_number AND\n    EXTRACT(YEAR FROM ae.date) = p_year AND\n    ae.entry_type_id = aet.id\n  GROUP BY m.month_name, m.month_number, aet.code, aet.name\n  ORDER BY m.month_number, aet.code;\nEND;\n$function$\n",
            "return_type": "record"
        },
        {
            "name": "get_monthly_aircraft_hours",
            "arguments": "start_date timestamp with time zone, end_date timestamp with time zone",
            "definition": "CREATE OR REPLACE FUNCTION public.get_monthly_aircraft_hours(start_date timestamp with time zone, end_date timestamp with time zone)\n RETURNS TABLE(aircraft_id uuid, aircraft_registration text, month date, total_hours numeric)\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nDECLARE\n    current_club_id UUID;\nBEGIN\n    -- Récupérer le club ID du membre connecté\n    SELECT club_id INTO current_club_id\n    FROM club_members\n    WHERE user_id = auth.uid()\n    LIMIT 1;\n\n    -- Vérifier si l'utilisateur est associé à un club\n    IF current_club_id IS NULL THEN\n        RAISE EXCEPTION 'Utilisateur non associé à un club';\n    END IF;\n\n    -- Récupérer les données des avions du même club\n    RETURN QUERY\n    SELECT \n        a.id AS aircraft_id,\n        a.registration AS aircraft_registration,\n        DATE_TRUNC('month', f.date)::date AS month,\n        ROUND(SUM(f.duration)::numeric / 60, 2) AS total_hours\n    FROM aircraft a\n    LEFT JOIN flights f ON f.aircraft_id = a.id\n    WHERE \n        a.club_id = current_club_id\n        AND f.date >= start_date\n        AND f.date <= end_date\n        AND f.is_validated = TRUE\n    GROUP BY a.id, a.registration, DATE_TRUNC('month', f.date)\n    ORDER BY a.registration, month;\nEND;\n$function$\n",
            "return_type": "record"
        },
        {
            "name": "get_monthly_aircraft_hours",
            "arguments": "p_club_id uuid, start_date timestamp with time zone, end_date timestamp with time zone",
            "definition": "CREATE OR REPLACE FUNCTION public.get_monthly_aircraft_hours(p_club_id uuid, start_date timestamp with time zone, end_date timestamp with time zone)\n RETURNS TABLE(aircraft_id uuid, aircraft_registration text, month timestamp with time zone, total_hours numeric)\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nBEGIN\n    RETURN QUERY\n    WITH monthly_hours AS (\n        SELECT \n            a.id as aircraft_id,\n            a.registration as aircraft_registration,\n            date_trunc('month', f.date) as flight_month,\n            COALESCE(SUM(f.duration)::numeric / 3600.0, 0) as hours\n        FROM aircraft a\n        LEFT JOIN flights f ON a.id = f.aircraft_id \n            AND f.date BETWEEN start_date AND end_date\n            AND f.is_validated = true\n        WHERE a.club_id = p_club_id\n        GROUP BY a.id, a.registration, date_trunc('month', f.date)\n    ),\n    all_months AS (\n        SELECT generate_series(\n            date_trunc('month', start_date),\n            date_trunc('month', end_date),\n            '1 month'::interval\n        ) as month_date\n    ),\n    aircraft_list AS (\n        SELECT DISTINCT id, registration\n        FROM aircraft\n        WHERE club_id = p_club_id\n    )\n    SELECT \n        al.id as aircraft_id,\n        al.registration as aircraft_registration,\n        am.month_date as month,\n        COALESCE(mh.hours, 0) as total_hours\n    FROM all_months am\n    CROSS JOIN aircraft_list al\n    LEFT JOIN monthly_hours mh ON mh.aircraft_id = al.id \n        AND mh.flight_month = am.month_date\n    ORDER BY al.registration, am.month_date;\nEND;\n$function$\n",
            "return_type": "record"
        },
        {
            "name": "get_monthly_flight_hours",
            "arguments": "start_date timestamp without time zone, end_date timestamp without time zone",
            "definition": "CREATE OR REPLACE FUNCTION public.get_monthly_flight_hours(start_date timestamp without time zone, end_date timestamp without time zone)\n RETURNS TABLE(month text, year integer, total_hours double precision)\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n  RETURN QUERY\n  SELECT \n    TO_CHAR(f.date, 'Month') as month,\n    EXTRACT(YEAR FROM f.date)::integer as year,\n    CAST(SUM(f.duration) AS double precision) / 60.0 as total_hours\n  FROM flights f\n  WHERE f.date BETWEEN start_date AND end_date\n  GROUP BY month, year, date_trunc('month', f.date)\n  ORDER BY date_trunc('month', f.date);\nEND;\n$function$\n",
            "return_type": "record"
        },
        {
            "name": "get_policies_info",
            "arguments": "",
            "definition": "CREATE OR REPLACE FUNCTION public.get_policies_info()\n RETURNS jsonb\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nBEGIN\n  RETURN (\n    SELECT jsonb_agg(\n      jsonb_build_object(\n        'table', tablename,\n        'name', policyname,\n        'definition', qual,\n        'command', cmd,\n        'roles', ARRAY[roles]::text[],\n        'permissive', permissive\n      )\n    )\n    FROM pg_policies\n    WHERE schemaname = 'public'\n  );\nEND;\n$function$\n",
            "return_type": "jsonb"
        },
        {
            "name": "get_recent_private_conversations",
            "arguments": "current_user_id uuid",
            "definition": "CREATE OR REPLACE FUNCTION public.get_recent_private_conversations(current_user_id uuid)\n RETURNS TABLE(sender_id uuid, recipient_id uuid, content text, created_at timestamp with time zone, unread_count bigint)\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nbegin\n  return query\n    with latest_messages as (\n      select distinct on (\n        case \n          when pm.sender_id = current_user_id then pm.recipient_id \n          else pm.sender_id \n        end\n      )\n        pm.sender_id,\n        pm.recipient_id,\n        pm.content,\n        pm.created_at\n      from private_messages pm\n      where pm.sender_id = current_user_id or pm.recipient_id = current_user_id\n      order by \n        case \n          when pm.sender_id = current_user_id then pm.recipient_id \n          else pm.sender_id \n        end,\n        pm.created_at desc\n    ),\n    unread_counts as (\n      select \n        case \n          when pm.sender_id = current_user_id then pm.recipient_id \n          else pm.sender_id \n        end as contact_id,\n        count(*) as unread_count\n      from private_messages pm\n      where \n        pm.recipient_id = current_user_id \n        and pm.read_at is null\n      group by \n        case \n          when pm.sender_id = current_user_id then pm.recipient_id \n          else pm.sender_id \n        end\n    )\n    select \n      lm.sender_id,\n      lm.recipient_id,\n      lm.content,\n      lm.created_at,\n      coalesce(uc.unread_count, 0) as unread_count\n    from latest_messages lm\n    left join unread_counts uc on \n      case \n        when lm.sender_id = current_user_id then lm.recipient_id \n        else lm.sender_id \n      end = uc.contact_id\n    order by lm.created_at desc;\nend;\n$function$\n",
            "return_type": "record"
        },
        {
            "name": "get_schema_info",
            "arguments": "",
            "definition": "CREATE OR REPLACE FUNCTION public.get_schema_info()\n RETURNS jsonb\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nBEGIN\n  RETURN (\n    SELECT jsonb_agg(\n      jsonb_build_object(\n        'name', tables.table_name,\n        'columns', (\n          SELECT jsonb_agg(\n            jsonb_build_object(\n              'name', columns.column_name,\n              'type', columns.data_type,\n              'nullable', columns.is_nullable = 'YES',\n              'default_value', columns.column_default\n            )\n          )\n          FROM information_schema.columns\n          WHERE columns.table_name = tables.table_name\n        ),\n        'constraints', (\n          SELECT jsonb_agg(constraint_name)\n          FROM information_schema.table_constraints\n          WHERE table_name = tables.table_name\n        )\n      )\n    )\n    FROM information_schema.tables\n    WHERE table_schema = 'public'\n  );\nEND;\n$function$\n",
            "return_type": "jsonb"
        },
        {
            "name": "get_user_groups",
            "arguments": "user_id uuid",
            "definition": "CREATE OR REPLACE FUNCTION public.get_user_groups(user_id uuid)\n RETURNS text[]\n LANGUAGE sql\n SECURITY DEFINER\nAS $function$\n  SELECT array_agg(ug.name)\n  FROM user_group_memberships ugm\n  JOIN user_groups ug ON ugm.group_id = ug.id\n  WHERE ugm.user_id = $1;\n$function$\n",
            "return_type": "_text"
        },
        {
            "name": "get_user_role",
            "arguments": "user_id uuid",
            "definition": "CREATE OR REPLACE FUNCTION public.get_user_role(user_id uuid)\n RETURNS text\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nBEGIN\n    IF is_member_of_group(user_id, 'Administrateurs') THEN\n        RETURN 'ADMIN';\n    ELSIF is_member_of_group(user_id, 'Instructeurs') THEN\n        RETURN 'INSTRUCTOR';\n    ELSIF is_member_of_group(user_id, 'Mécaniciens') THEN\n        RETURN 'MECHANIC';\n    ELSIF is_member_of_group(user_id, 'Pilotes') THEN\n        RETURN 'PILOT';\n    ELSE\n        RETURN 'PILOT'; -- Rôle par défaut\n    END IF;\nEND;\n$function$\n",
            "return_type": "text"
        },
        {
            "name": "handle_category_deletion",
            "arguments": "",
            "definition": "CREATE OR REPLACE FUNCTION public.handle_category_deletion()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n  uncategorized_id uuid;\nBEGIN\n  -- Get the uncategorized category id for this club\n  SELECT id INTO uncategorized_id\n  FROM document_categories\n  WHERE club_id = OLD.club_id\n  AND name = 'Non classé'\n  LIMIT 1;\n\n  -- Move documents to uncategorized category\n  UPDATE documents\n  SET category_id = uncategorized_id\n  WHERE category_id = OLD.id;\n  \n  RETURN OLD;\nEND;\n$function$\n",
            "return_type": "trigger"
        },
        {
            "name": "handle_new_user",
            "arguments": "",
            "definition": "CREATE OR REPLACE FUNCTION public.handle_new_user()\n RETURNS trigger\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nBEGIN\n  -- Vérifier si l'utilisateur existe déjà dans public.users\n  IF NOT EXISTS (\n    SELECT 1 FROM public.users \n    WHERE email = NEW.email\n  ) THEN\n    INSERT INTO public.users (\n      auth_id, \n      email, \n      first_name, \n      last_name, \n      role,\n      login,  -- Ajout du login obligatoire\n      password  -- Ajout du password obligatoire\n    )\n    VALUES (\n      NEW.id, \n      NEW.email, \n      '', \n      '', \n      COALESCE((NEW.raw_user_meta_data->>'role')::text, 'PILOT'),\n      split_part(NEW.email, '@', 1),  -- Utilise la partie avant @ de l'email comme login\n      'TemporaryPassword123!'  -- Mot de passe temporaire\n    );\n  END IF;\n  RETURN NEW;\nEND;\n$function$\n",
            "return_type": "trigger"
        },
        {
            "name": "handle_updated_at",
            "arguments": "",
            "definition": "CREATE OR REPLACE FUNCTION public.handle_updated_at()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\nbegin\n    new.updated_at = now();\n    return new;\nend;\n$function$\n",
            "return_type": "trigger"
        },
        {
            "name": "has_any_group",
            "arguments": "user_id uuid, group_names text[]",
            "definition": "CREATE OR REPLACE FUNCTION public.has_any_group(user_id uuid, group_names text[])\n RETURNS boolean\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nDECLARE\n    checking_user uuid := user_id;\nBEGIN\n    RETURN EXISTS (\n        SELECT 1\n        FROM user_group_memberships ugm\n        JOIN user_groups ug ON ugm.group_id = ug.id\n        WHERE ugm.user_id = checking_user\n        AND ug.name = ANY(group_names)\n    );\nEND;\n$function$\n",
            "return_type": "bool"
        },
        {
            "name": "initialize_default_permissions",
            "arguments": "",
            "definition": "CREATE OR REPLACE FUNCTION public.initialize_default_permissions()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$BEGIN\n  INSERT INTO permission_settings (club_id, permission_id, allowed_roles, is_custom)\n  VALUES\n    (NEW.id, 'flight:view', ARRAY['ADMIN', 'INSTRUCTOR', 'PILOT', 'STUDENT'], false),\n    (NEW.id, 'flight:create', ARRAY['ADMIN', 'INSTRUCTOR', 'PILOT'], false),\n    (NEW.id, 'flight:modify', ARRAY['ADMIN', 'INSTRUCTOR'], false),\n    (NEW.id, 'flight:delete', ARRAY['ADMIN'], false),\n    \n    (NEW.id, 'training:view', ARRAY['ADMIN', 'INSTRUCTOR', 'STUDENT'], false),\n    (NEW.id, 'training:create', ARRAY['ADMIN', 'INSTRUCTOR'], false),\n    (NEW.id, 'training:modify', ARRAY['ADMIN', 'INSTRUCTOR'], false),\n    (NEW.id, 'training:delete', ARRAY['ADMIN'], false),\n    \n    (NEW.id, 'maintenance:view', ARRAY['ADMIN', 'MECHANIC', 'INSTRUCTOR'], false),\n    (NEW.id, 'maintenance:create', ARRAY['ADMIN', 'MECHANIC'], false),\n    (NEW.id, 'maintenance:modify', ARRAY['ADMIN', 'MECHANIC'], false),\n    (NEW.id, 'maintenance:delete', ARRAY['ADMIN'], false),\n    \n    (NEW.id, 'user:view', ARRAY['ADMIN', 'INSTRUCTOR'], false),\n    (NEW.id, 'user:create', ARRAY['ADMIN'], false),\n    (NEW.id, 'user:modify', ARRAY['ADMIN'], false),\n    (NEW.id, 'user:delete', ARRAY['ADMIN'], false),\n    \n    (NEW.id, 'settings:view', ARRAY['ADMIN', 'INSTRUCTOR', 'PILOT', 'STUDENT', 'MECHANIC', 'DISCOVERY', 'MODELIST', 'SUPERADMIN', 'ULM_PILOT'], false),\n    (NEW.id, 'settings:modify', ARRAY['ADMIN', 'SUPERADMIN'], false),\n    \n    (NEW.id, 'chat:view', ARRAY['ADMIN', 'INSTRUCTOR', 'PILOT', 'SUPERADMIN'], false),\n    (NEW.id, 'chat:send', ARRAY['ADMIN', 'INSTRUCTOR', 'PILOT', 'SUPERADMIN'], false),\n    \n    (NEW.id, 'event:view', ARRAY['ADMIN', 'INSTRUCTOR', 'PILOT', 'STUDENT', 'SUPERADMIN'], false),\n    (NEW.id, 'event:create', ARRAY['ADMIN', 'INSTRUCTOR', 'SUPERADMIN'], false),\n    (NEW.id, 'event:modify', ARRAY['ADMIN', 'INSTRUCTOR', 'SUPERADMIN'], false),\n    (NEW.id, 'event:delete', ARRAY['ADMIN', 'SUPERADMIN'], false),\n    \n    (NEW.id, 'doc:view', ARRAY['ADMIN', 'INSTRUCTOR', 'PILOT', 'STUDENT', 'MECHANIC', 'SUPERADMIN'], false),\n    (NEW.id, 'doc:modify', ARRAY['ADMIN', 'INSTRUCTOR', 'SUPERADMIN'], false),\n    \n    (NEW.id, 'progression:view', ARRAY['ADMIN', 'INSTRUCTOR', 'STUDENT', 'PILOT', 'SUPERADMIN'], false),\n    (NEW.id, 'progression:modify', ARRAY['ADMIN', 'INSTRUCTOR', 'SUPERADMIN'], false),\n    \n    (NEW.id, 'planning:view', ARRAY['ADMIN', 'INSTRUCTOR', 'PILOT', 'STUDENT', 'MECHANIC', 'SUPERADMIN'], false),\n    (NEW.id, 'planning:modify', ARRAY['ADMIN', 'INSTRUCTOR', 'SUPERADMIN'], false),\n    \n    (NEW.id, 'stats:view', ARRAY['ADMIN', 'INSTRUCTOR', 'SUPERADMIN'], false),\n\n    -- Nouvelles permissions pour les vols découverte\n    (NEW.id, 'discovery:view', ARRAY['ADMIN', 'DISCOVERY_PILOT', 'INSTRUCTOR', 'SUPERADMIN'], false),\n    (NEW.id, 'discovery:create', ARRAY['ADMIN', 'DISCOVERY_PILOT', 'INSTRUCTOR', 'SUPERADMIN'], false),\n    (NEW.id, 'discovery:modify', ARRAY['ADMIN', 'DISCOVERY_PILOT', 'INSTRUCTOR', 'SUPERADMIN'], false),\n    (NEW.id, 'discovery:delete', ARRAY['ADMIN', 'SUPERADMIN'], false);\n\n  RETURN NEW;\nEND;$function$\n",
            "return_type": "trigger"
        },
        {
            "name": "insert_discovery_flight_permissions",
            "arguments": "",
            "definition": "CREATE OR REPLACE FUNCTION public.insert_discovery_flight_permissions()\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n    club_record RECORD;\nBEGIN\n    -- Pour chaque club\n    FOR club_record IN SELECT id FROM clubs LOOP\n        -- Visualisation des vols découverte\n        INSERT INTO permission_settings (club_id, permission_id, allowed_roles, is_custom)\n        VALUES (\n            club_record.id,\n            'discovery:view',\n            ARRAY['ADMIN', 'DISCOVERY_PILOT']::text[],\n            false\n        )\n        ON CONFLICT (club_id, permission_id) \n        DO UPDATE SET allowed_roles = ARRAY['ADMIN', 'DISCOVERY_PILOT']::text[];\n\n        -- Création des vols découverte\n        INSERT INTO permission_settings (club_id, permission_id, allowed_roles, is_custom)\n        VALUES (\n            club_record.id,\n            'discovery:create',\n            ARRAY['ADMIN', 'DISCOVERY_PILOT']::text[],\n            false\n        )\n        ON CONFLICT (club_id, permission_id) \n        DO UPDATE SET allowed_roles = ARRAY['ADMIN', 'DISCOVERY_PILOT']::text[];\n\n        -- Modification des vols découverte\n        INSERT INTO permission_settings (club_id, permission_id, allowed_roles, is_custom)\n        VALUES (\n            club_record.id,\n            'discovery:modify',\n            ARRAY['ADMIN', 'DISCOVERY_PILOT']::text[],\n            false\n        )\n        ON CONFLICT (club_id, permission_id) \n        DO UPDATE SET allowed_roles = ARRAY['ADMIN', 'DISCOVERY_PILOT']::text[];\n\n        -- Suppression des vols découverte\n        INSERT INTO permission_settings (club_id, permission_id, allowed_roles, is_custom)\n        VALUES (\n            club_record.id,\n            'discovery:delete',\n            ARRAY['ADMIN']::text[],\n            false\n        )\n        ON CONFLICT (club_id, permission_id) \n        DO UPDATE SET allowed_roles = ARRAY['ADMIN']::text[];\n    END LOOP;\nEND;\n$function$\n",
            "return_type": "void"
        },
        {
            "name": "insert_maintenance",
            "arguments": "aircraft_id uuid, maintenance_date timestamp with time zone, maintenance_type text, comments text, next_date timestamp with time zone, next_hours integer, hours_at_maintenance numeric",
            "definition": "CREATE OR REPLACE FUNCTION public.insert_maintenance(aircraft_id uuid, maintenance_date timestamp with time zone, maintenance_type text, comments text, next_date timestamp with time zone, next_hours integer, hours_at_maintenance numeric)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n    -- Insertion de la maintenance\n    INSERT INTO maintenance (\n        aircraft_id,\n        date,\n        type,\n        comments,\n        next_maintenance_date,\n        next_maintenance_hours,\n        aircraft_hours_at_maintenance\n    ) VALUES (\n        aircraft_id,\n        maintenance_date,\n        maintenance_type::maintenance_type,\n        comments,\n        next_date,\n        next_hours,\n        hours_at_maintenance\n    );\n\n    -- Mise à jour de l'appareil avec les nouvelles informations de maintenance\n    UPDATE aircraft\n    SET \n        last_maintenance = maintenance_date,\n        next_maintenance_date = next_date,\n        hours_before_maintenance = next_hours,\n        updated_at = NOW()\n    WHERE id = aircraft_id;\nEND;\n$function$\n",
            "return_type": "void"
        },
        {
            "name": "is_member_of_group",
            "arguments": "user_id uuid, group_name text",
            "definition": "CREATE OR REPLACE FUNCTION public.is_member_of_group(user_id uuid, group_name text)\n RETURNS boolean\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nBEGIN\n    RETURN EXISTS (\n        SELECT 1 \n        FROM user_group_memberships ugm\n        JOIN user_groups ug ON ugm.group_id = ug.id\n        WHERE ugm.user_id = $1 \n        AND ug.name = $2\n    );\nEND;\n$function$\n",
            "return_type": "bool"
        },
        {
            "name": "is_super_admin",
            "arguments": "user_id uuid",
            "definition": "CREATE OR REPLACE FUNCTION public.is_super_admin(user_id uuid)\n RETURNS boolean\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nBEGIN\n    RETURN is_member_of_group(user_id, 'Administrateurs');\nEND;\n$function$\n",
            "return_type": "bool"
        },
        {
            "name": "is_user_admin_of_club",
            "arguments": "p_user_id uuid, p_club_id uuid",
            "definition": "CREATE OR REPLACE FUNCTION public.is_user_admin_of_club(p_user_id uuid, p_club_id uuid)\n RETURNS boolean\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nBEGIN\n    RETURN (\n        is_member_of_group(p_user_id, 'Administrateurs') AND\n        EXISTS (\n            SELECT 1 FROM public.club_members\n            WHERE user_id = p_user_id\n            AND club_id = p_club_id\n        )\n    );\nEND;\n$function$\n",
            "return_type": "bool"
        },
        {
            "name": "is_user_member_of_club",
            "arguments": "p_user_id uuid, p_club_id uuid",
            "definition": "CREATE OR REPLACE FUNCTION public.is_user_member_of_club(p_user_id uuid, p_club_id uuid)\n RETURNS boolean\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nBEGIN\n  -- Disable row-level security temporarily\n  PERFORM set_config('row_security', 'off', true);\n\n  RETURN EXISTS (\n    SELECT 1 FROM public.club_members\n    WHERE user_id = p_user_id\n      AND club_id = p_club_id\n  );\nEND;\n$function$\n",
            "return_type": "bool"
        },
        {
            "name": "migrate_roles_to_groups",
            "arguments": "",
            "definition": "CREATE OR REPLACE FUNCTION public.migrate_roles_to_groups()\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n    pilot_group_id UUID;\n    instructor_group_id UUID;\n    admin_group_id UUID;\n    mechanic_group_id UUID;\nBEGIN\n    -- Get group IDs\n    SELECT id INTO pilot_group_id FROM user_groups WHERE name = 'Pilotes';\n    SELECT id INTO instructor_group_id FROM user_groups WHERE name = 'Instructeurs';\n    SELECT id INTO admin_group_id FROM user_groups WHERE name = 'Administrateurs';\n    SELECT id INTO mechanic_group_id FROM user_groups WHERE name = 'Mécaniciens';\n\n    -- Migrate PILOT role\n    INSERT INTO user_group_memberships (user_id, group_id)\n    SELECT id, pilot_group_id\n    FROM users\n    WHERE role = 'PILOT';\n\n    -- Migrate INSTRUCTOR role\n    INSERT INTO user_group_memberships (user_id, group_id)\n    SELECT id, instructor_group_id\n    FROM users\n    WHERE role = 'INSTRUCTOR';\n\n    -- Migrate ADMIN role\n    INSERT INTO user_group_memberships (user_id, group_id)\n    SELECT id, admin_group_id\n    FROM users\n    WHERE role = 'ADMIN';\n\n    -- Migrate MECHANIC role\n    INSERT INTO user_group_memberships (user_id, group_id)\n    SELECT id, mechanic_group_id\n    FROM users\n    WHERE role = 'MECHANIC';\nEND;\n$function$\n",
            "return_type": "void"
        },
        {
            "name": "notify_mechanics_about_remark",
            "arguments": "",
            "definition": "CREATE OR REPLACE FUNCTION public.notify_mechanics_about_remark()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n    mechanic_id uuid;\n    room_id uuid;\nBEGIN\n    -- Create a chat room for the remark if it doesn't exist\n    INSERT INTO chat_rooms (name, type)\n    VALUES (\n        'Remarque ' || NEW.id,\n        'MECHANIC_REMARK'\n    )\n    RETURNING id INTO room_id;\n\n    -- Add the remark creator to the room\n    INSERT INTO chat_room_members (room_id, user_id)\n    VALUES (room_id, NEW.user_id);\n\n    -- Add all mechanics to the room\n    FOR mechanic_id IN\n        SELECT id FROM users WHERE role = 'MECHANIC'\n    LOOP\n        INSERT INTO chat_room_members (room_id, user_id)\n        VALUES (room_id, mechanic_id);\n    END LOOP;\n\n    -- Create initial message\n    INSERT INTO chat_messages (room_id, user_id, content)\n    VALUES (\n        room_id,\n        NEW.user_id,\n        'Nouvelle remarque sur ' || (SELECT registration FROM aircraft WHERE id = NEW.aircraft_id) || ': ' || NEW.content\n    );\n\n    RETURN NEW;\nEND;\n$function$\n",
            "return_type": "trigger"
        },
        {
            "name": "recreate_auth_constraint",
            "arguments": "",
            "definition": "CREATE OR REPLACE FUNCTION public.recreate_auth_constraint()\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nbegin\n  -- Recréer la contrainte de public.users vers auth.users\n  alter table public.users \n  add constraint users_auth_id_fkey \n  foreign key (auth_id) \n  references auth.users(id);\n  \n  -- Recréer la contrainte de auth.identities vers auth.users\n  alter table auth.identities\n  add constraint identities_user_id_fkey\n  foreign key (user_id)\n  references auth.users(id);\n  \n  -- Recréer autres contraintes\n  alter table auth.sessions\n  add constraint sessions_user_id_fkey\n  foreign key (user_id)\n  references auth.users(id);\n  \n  alter table auth.mfa_factors\n  add constraint mfa_factors_user_id_fkey\n  foreign key (user_id)\n  references auth.users(id);\n  \n  alter table auth.refresh_tokens\n  add constraint refresh_tokens_user_id_fkey\n  foreign key (user_id)\n  references auth.users(id);\nend;\n$function$\n",
            "return_type": "void"
        },
        {
            "name": "reset_database",
            "arguments": "",
            "definition": "CREATE OR REPLACE FUNCTION public.reset_database()\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nBEGIN\n  -- Delete all data from tables\n  DELETE FROM daily_challenges;\n  DELETE FROM user_progress;\n  DELETE FROM training_questions;\n  DELETE FROM training_modules;\n  DELETE FROM account_entries;\n  DELETE FROM flights;\n  DELETE FROM reservations;\n  DELETE FROM flight_types;\n  DELETE FROM aircraft;\n  DELETE FROM users;\n\n  -- Insert test users\n  INSERT INTO users (id, first_name, last_name, email, role, login, password, balance) VALUES\n    (gen_random_uuid(), 'Admin', 'System', 'admin@flymanager.com', 'ADMIN', 'admin', 'admin123', 0),\n    (gen_random_uuid(), 'Marie', 'Martin', 'instructor@flymanager.com', 'INSTRUCTOR', 'instructor', 'instructor123', 500),\n    (gen_random_uuid(), 'Jean', 'Dupont', 'pilot@flymanager.com', 'PILOT', 'pilot', 'pilot123', 1000),\n    (gen_random_uuid(), 'Pierre', 'Dubois', 'mechanic@flymanager.com', 'MECHANIC', 'mechanic', 'mechanic123', 0);\n\n  -- Insert test aircraft\n  INSERT INTO aircraft (id, name, type, registration, capacity, hourly_rate, hours_before_maintenance, status) VALUES\n    (gen_random_uuid(), 'DR400-120', 'PLANE', 'F-GBQA', 4, 150, 45, 'AVAILABLE'),\n    (gen_random_uuid(), 'DR400-140', 'PLANE', 'F-GBQB', 4, 180, 30, 'AVAILABLE'),\n    (gen_random_uuid(), 'PA-28', 'PLANE', 'F-GXYZ', 4, 160, 15, 'AVAILABLE'),\n    (gen_random_uuid(), 'C152', 'PLANE', 'F-ABCD', 2, 130, 8, 'MAINTENANCE');\n\n  -- Insert flight types\n  INSERT INTO flight_types (id, name, description, requires_instructor) VALUES\n    ('local', 'Vol Local', 'Vol local sans instruction', false),\n    ('instruction', 'Instruction', 'Vol d''instruction avec instructeur', true),\n    ('navigation', 'Navigation', 'Vol de navigation', false),\n    ('discovery', 'Vol Découverte', 'Vol découverte pour le public', true);\n\n  -- Insert training modules\n  INSERT INTO training_modules (id, title, description, level, category, points) VALUES\n    (gen_random_uuid(), 'Réglementation aérienne', 'Règles de l''air et procédures opérationnelles', 'BEGINNER', 'REGULATIONS', 100),\n    (gen_random_uuid(), 'Navigation', 'Principes de navigation et planification', 'INTERMEDIATE', 'NAVIGATION', 150),\n    (gen_random_uuid(), 'Météorologie', 'Interprétation des données météo', 'BEGINNER', 'WEATHER', 100),\n    (gen_random_uuid(), 'Performance humaine', 'Facteurs humains en aviation', 'INTERMEDIATE', 'HUMAN_FACTORS', 120);\n\n  -- Insert test questions\n  WITH module_ids AS (SELECT id FROM training_modules)\n  INSERT INTO training_questions (id, module_id, question, choices, correct_answer, explanation, points)\n  SELECT \n    gen_random_uuid(),\n    id,\n    'Quelle est l''altitude de transition en France ?',\n    '[\"3000 ft\", \"5000 ft\", \"6000 ft\", \"FL 50\"]'::jsonb,\n    1,\n    'L''altitude de transition en France métropolitaine est généralement fixée à 5000 ft.',\n    10\n  FROM module_ids\n  LIMIT 1;\n\n  -- Insert test reservations and flights\n\n-- Insert flight types if not exists\nINSERT INTO flight_types (id, name, description, requires_instructor) VALUES\n  ('local', 'Vol Local', 'Vol local sans instruction', false),\n  ('instruction', 'Instruction', 'Vol d''instruction avec instructeur', true),\n  ('navigation', 'Navigation', 'Vol de navigation', false),\n  ('discovery', 'Vol Découverte', 'Vol découverte pour le public', true)\nON CONFLICT (id) DO NOTHING;\n\n-- Insert test reservations for the next few days\nWITH aircraft_ids AS (SELECT id FROM aircraft WHERE status = 'AVAILABLE'),\n     pilot_ids AS (SELECT id FROM users WHERE role IN ('PILOT', 'INSTRUCTOR')),\n     flight_type_ids AS (SELECT id FROM flight_types)\nINSERT INTO reservations (\n  id, \n  user_id, \n  aircraft_id, \n  flight_type_id,\n  start_time, \n  end_time, \n  with_instructor,\n  status\n)\nSELECT\n  gen_random_uuid(),\n  pilot_id,\n  aircraft_id,\n  flight_type_id,\n  start_time,\n  start_time + interval '2 hours',\n  CASE WHEN ft.requires_instructor THEN true ELSE false END,\n  'ACTIVE'\nFROM (\n  SELECT \n    p.pilot_id,\n    a.aircraft_id,\n    ft.id as flight_type_id,\n    ft.requires_instructor,\n    (CURRENT_DATE + (n || ' days')::interval)::timestamp + '10:00'::time AS start_time\n  FROM \n    (SELECT id AS pilot_id FROM pilot_ids) p\n    CROSS JOIN (SELECT id AS aircraft_id FROM aircraft_ids) a\n    CROSS JOIN (SELECT id, requires_instructor FROM flight_types) ft\n    CROSS JOIN generate_series(1, 5) n\n  LIMIT 10\n) AS reservations(pilot_id, aircraft_id, flight_type_id, requires_instructor, start_time)\nJOIN flight_types ft ON ft.id = flight_type_id;\n\n-- Insert test flights\nWITH pilot_ids AS (SELECT id FROM users WHERE role IN ('PILOT', 'INSTRUCTOR')),\n     aircraft_ids AS (SELECT id FROM aircraft WHERE status = 'AVAILABLE'),\n     flight_type_ids AS (SELECT id FROM flight_types)\nINSERT INTO flights (\n  id, \n  user_id, \n  aircraft_id, \n  flight_type_id,\n  date, \n  duration, \n  cost, \n  payment_method, \n  is_validated\n)\nSELECT\n  gen_random_uuid(),\n  pilot_id,\n  aircraft_id,\n  flight_type_id,\n  flight_date,\n  duration,\n  cost,\n  payment_method,\n  is_validated\nFROM (\n  SELECT \n    pilot_id,\n    aircraft_id,\n    (SELECT id FROM flight_types ORDER BY random() LIMIT 1) as flight_type_id,\n    CURRENT_DATE - (n || ' days')::interval AS flight_date,\n    60 * (1 + random()::int) AS duration,\n    150 * (1 + random()::int) AS cost,\n    CASE (random() * 3)::int\n      WHEN 0 THEN 'ACCOUNT'\n      WHEN 1 THEN 'CARD'\n      ELSE 'CASH'\n    END AS payment_method,\n    random() > 0.3 AS is_validated\n  FROM \n    (SELECT id AS pilot_id FROM pilot_ids) p\n    CROSS JOIN (SELECT id AS aircraft_id FROM aircraft_ids) a\n    CROSS JOIN generate_series(1, 10) n\n  LIMIT 20\n) AS flights(pilot_id, aircraft_id, flight_type_id, flight_date, duration, cost, payment_method, is_validated);\n\n-- Insert account entries for flights\nINSERT INTO account_entries (id, user_id, date, type, amount, payment_method, description, is_validated)\nSELECT\n  gen_random_uuid(),\n  user_id,\n  date,\n  'FLIGHT',\n  -cost,\n  payment_method,\n  'Vol du ' || to_char(date, 'DD/MM/YYYY'),\n  is_validated\nFROM flights;\n  -- Return success\n  RETURN;\nEND;\n$function$\n",
            "return_type": "void"
        },
        {
            "name": "safe_delete_user",
            "arguments": "user_id uuid",
            "definition": "CREATE OR REPLACE FUNCTION public.safe_delete_user(user_id uuid)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\ndeclare\n  has_transactions boolean;\n  has_entries boolean;\n  has_assigned_entries boolean;\nbegin\n  -- Vérifier les transactions\n  select exists(\n    select 1 from account_transactions \n    where user_id = $1\n    limit 1\n  ) into has_transactions;\n\n  if has_transactions then\n    raise exception 'Impossible de supprimer ce membre car il a des transactions associées';\n  end if;\n\n  -- Vérifier les entrées comptables\n  select exists(\n    select 1 from account_entries \n    where user_id = $1\n    limit 1\n  ) into has_entries;\n\n  if has_entries then\n    raise exception 'Impossible de supprimer ce membre car il a des entrées comptables';\n  end if;\n\n  -- Vérifier les entrées comptables assignées\n  select exists(\n    select 1 from account_entries \n    where assigned_to_id = $1\n    limit 1\n  ) into has_assigned_entries;\n\n  if has_assigned_entries then\n    raise exception 'Impossible de supprimer ce membre car il est assigné à des entrées comptables';\n  end if;\n\n  -- Supprimer les données associées dans l'ordre correct\n  delete from dismissed_announcements where user_id = $1;\n  delete from chat_room_members where user_id = $1;\n  delete from chat_messages where user_id = $1;\n  delete from private_messages where sender_id = $1 or recipient_id = $1;\n  delete from pilot_licenses where user_id = $1;\n  delete from medical_certifications where user_id = $1;\n  delete from user_badges where user_id = $1;\n  delete from availabilities where user_id = $1;\n  delete from aircraft_remark_responses where user_id = $1;\n  delete from aircraft_remarks where user_id = $1;\n  delete from user_group_memberships where user_id = $1;\n  delete from club_members where user_id = $1;\n  \n  -- Supprimer l'utilisateur de public.users\n  -- Le trigger sync_user_deletion se déclenchera automatiquement\n  delete from users where id = $1;\nend;\n$function$\n",
            "return_type": "void"
        },
        {
            "name": "send_welcome_email",
            "arguments": "p_email text, p_user_metadata jsonb",
            "definition": "CREATE OR REPLACE FUNCTION public.send_welcome_email(p_email text, p_user_metadata jsonb)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nbegin\n    -- Utilise l'API Supabase pour envoyer l'email\n    select net.http_post(\n        url := 'https://jqrijsrbeksztlgnciah.supabase.co/auth/v1/admin/send-email',\n        headers := jsonb_build_object(\n            'Content-Type', 'application/json',\n            'Authorization', current_setting('request.header.apikey')\n        ),\n        body := jsonb_build_object(\n            'email', p_email,\n            'template', 'welcome',  -- Le nom de votre template\n            'data', p_user_metadata\n        )\n    );\nend;\n$function$\n",
            "return_type": "void"
        },
        {
            "name": "set_current_timestamp_updated_at",
            "arguments": "",
            "definition": "CREATE OR REPLACE FUNCTION public.set_current_timestamp_updated_at()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n    NEW.updated_at = now();\n    RETURN NEW;\nEND;\n$function$\n",
            "return_type": "trigger"
        },
        {
            "name": "trigger_set_updated_at",
            "arguments": "",
            "definition": "CREATE OR REPLACE FUNCTION public.trigger_set_updated_at()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n    NEW.updated_at = CURRENT_TIMESTAMP;\n    RETURN NEW;\nEND;\n$function$\n",
            "return_type": "trigger"
        },
        {
            "name": "update_auth_user_id",
            "arguments": "user_email text, new_id text",
            "definition": "CREATE OR REPLACE FUNCTION public.update_auth_user_id(user_email text, new_id text)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\ndeclare\n  old_id text;\nbegin\n  -- Récupérer l'ancien ID\n  select id::text into old_id from auth.users where email = user_email;\n  \n  -- Mettre à jour l'ID dans auth.identities\n  update auth.identities\n  set user_id = new_id::uuid\n  where user_id::text = old_id;\n  \n  -- Mettre à jour l'ID dans auth.sessions\n  update auth.sessions\n  set user_id = new_id::uuid\n  where user_id::text = old_id;\n  \n  -- Mettre à jour l'ID dans auth.mfa_factors\n  update auth.mfa_factors\n  set user_id = new_id::uuid\n  where user_id::text = old_id;\n  \n  -- Mettre à jour l'ID dans auth.refresh_tokens\n  update auth.refresh_tokens\n  set user_id = new_id::uuid\n  where user_id::text = old_id;\n  \n  -- Finalement, mettre à jour l'ID dans auth.users\n  update auth.users\n  set id = new_id::uuid\n  where email = user_email;\nend;\n$function$\n",
            "return_type": "void"
        },
        {
            "name": "update_discovery_flight_prices_updated_at",
            "arguments": "",
            "definition": "CREATE OR REPLACE FUNCTION public.update_discovery_flight_prices_updated_at()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n    NEW.updated_at = timezone('utc'::text, now());\n    RETURN NEW;\nEND;\n$function$\n",
            "return_type": "trigger"
        },
        {
            "name": "update_permission_settings_updated_at",
            "arguments": "",
            "definition": "CREATE OR REPLACE FUNCTION public.update_permission_settings_updated_at()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n  NEW.updated_at = TIMEZONE('utc'::text, NOW());\n  RETURN NEW;\nEND;\n$function$\n",
            "return_type": "trigger"
        },
        {
            "name": "update_updated_at_column",
            "arguments": "",
            "definition": "CREATE OR REPLACE FUNCTION public.update_updated_at_column()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n    NEW.updated_at = NOW();\n    RETURN NEW;\nEND;\n$function$\n",
            "return_type": "trigger"
        },
        {
            "name": "update_user_groups",
            "arguments": "p_user_id uuid, p_groups text[]",
            "definition": "CREATE OR REPLACE FUNCTION public.update_user_groups(p_user_id uuid, p_groups text[])\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nDECLARE\n    group_name text;\n    group_id uuid;\nBEGIN\n    -- Supprimer toutes les associations existantes pour cet utilisateur\n    DELETE FROM public.user_group_memberships\n    WHERE user_id = p_user_id;\n\n    -- Pour chaque groupe fourni\n    FOREACH group_name IN ARRAY p_groups\n    LOOP\n        -- Récupérer l'ID du groupe\n        SELECT id INTO group_id\n        FROM public.user_groups\n        WHERE name = group_name;\n\n        -- Si le groupe existe\n        IF group_id IS NOT NULL THEN\n            -- Insérer la nouvelle association\n            INSERT INTO public.user_group_memberships (user_id, group_id)\n            VALUES (p_user_id, group_id);\n        ELSE\n            -- Créer le groupe s'il n'existe pas\n            INSERT INTO public.user_groups (name, description)\n            VALUES (group_name, 'Automatically created group')\n            RETURNING id INTO group_id;\n\n            -- Puis créer l'association\n            INSERT INTO public.user_group_memberships (user_id, group_id)\n            VALUES (p_user_id, group_id);\n        END IF;\n    END LOOP;\nEND;\n$function$\n",
            "return_type": "void"
        },
        {
            "name": "validate_flight_and_account",
            "arguments": "flight_id uuid",
            "definition": "CREATE OR REPLACE FUNCTION public.validate_flight_and_account(flight_id uuid)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nBEGIN\n  -- Update flight validation status\n  UPDATE flights \n  SET is_validated = true,\n      updated_at = NOW()\n  WHERE id = flight_id;\n\n  -- Update corresponding account entry\n  UPDATE account_entries\n  SET is_validated = true,\n      updated_at = NOW()\n  WHERE flight_id = flight_id;\nEND;\n$function$\n",
            "return_type": "void"
        }
    ]
}