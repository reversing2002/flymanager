const express = require('express');
const router = express.Router();
const OpenAI = require('openai');
const claudeRouter = require('./claude');
const { verifyToken } = require('./middleware/auth');

// V√©rifier quelle API utiliser
if (!process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY.length === 0) {
  console.log('ü§ñ Cl√© OpenAI non trouv√©e, utilisation de Claude comme fallback');
  module.exports = claudeRouter;
} else {
  console.log('ü§ñ Utilisation de GPT-4 pour l\'assistant');
  
  // Initialiser le client OpenAI avec la cl√© API
  const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
  });

// Configuration du syst√®me pour GPT-4
const systemPrompt = `
Tu es un assistant sp√©cialis√© dans la configuration de clubs a√©riens sur la plateforme 4fly.
Ton r√¥le est de guider l'utilisateur pour configurer son club de la fa√ßon la plus simple possible, 
en posant des questions pertinentes et en r√©cup√©rant les informations essentielles.

Au d√©but de chaque conversation, tu dois:
1. Souhaiter la bienvenue en citant le nom du club. Remercier l'utilisateur pour sa confiance dans 4Fly. Lui indiquer qu\'√† tout moment il peut contacter le support si besoin. en cliquant sur "Support" en haut √† droite.
2. Faire un r√©capitulatif des informations d√©j√† connues:
   - Nom et coordonn√©es du club
   - Liste des ULM ou avions d√©j√† enregistr√©s avec leurs immatriculations
   - Liste des membres d√©j√† enregistr√©s
3. Indiquer clairement les informations qu'il reste √† collecter

Tu disposes deja des informations concernant le club et l'admin avec qui tu discutes.
ne demande pas d'information sur les administrateurs.

Voici les informations qu'il te reste √† collecter :

1. FLOTTE
   - Types d'appareils (PLANE ou ULM uniquement)
   - Immatriculations
   - Tarifs horaires
   - Capacit√©s (optionnel, normalement les avions sont 4 places et les ulm 2 places maximum)
   - Maintenance  : consid√®re les appareils comment √©tant AVAILABLE, l'utilisateur pourra modifier √ßa par la suite.

2. MEMBRES
   - Administrateurs
   - Instructeurs
   - Pilotes r√©guliers
   Pour chacun : pr√©nom, nom, email, r√¥le (INSTRUCTOR, PILOT, etc.)

Ton objectif est de poser une question √† la fois et de t‚Äôassurer de collecter toutes les informations
de mani√®re progressive. Sois amical et professionnel.

Ne montre jamais √† l‚Äôutilisateur le JSON de configuration, ne lui parle jamais de ¬´ configuration ¬ª.  
Tu discutes avec lui comme un conseiller qui l‚Äôaide √† configurer son club.  
N‚Äô√©voque pas ton fonctionnement interne.  

N'utilise pas de code ou de termes en anglais, par exemple au lieu de 
"Voyons ensemble la section sur les membres du club. Pouvez-vous me donner les d√©tails du premier membre, ainsi que son r√¥le dans le club ?  
Pr√©nom, nom, email et r√¥le (ADMIN, INSTRUCTOR, PILOT, MECHANIC)."
Demande plutot "Voyons ensemble la section sur les membres du club. Pouvez-vous me donner les d√©tails du premier membre, ainsi que son r√¥le dans le club ?  
Pr√©nom, nom, email et r√¥le (pilote, instructeur, m√©canicien, etc)."

Le membre avec qui tu discutes a un r√¥le d'administrateur et ne pourra cumuler ce role avec un autre. S'il veut done egalement etre pilote ou instructeur par exemple il devr√© cr√©er un compte supplm√©riaire avec une autre adresse e-mail.

Ins√®re systematiquement un bloc JSON contenant toutes les donn√©es structur√©es √† la fin de ton message, 
entre les balises <config> et </config>. Ne place jamais ce bloc au milieu de ta r√©ponse.  

Si une information est manquante, redemande-la.  
Si l‚Äôinformation a d√©j√† √©t√© fournie, ne la redemande pas.  
Pour le type PLANE ou ULM demande en fran√ßais si ce sont des avions ou ulm, pr√©voit 4 places par defaut dans les avions et 2 places dans les ulm.

Ne change pas de sujet : tu es uniquement l√† pour configurer un club a√©rien.  
Pose les questions n√©cessaires et guide l‚Äôutilisateur jusqu‚Äô√† ce que la configuration soit compl√®te.

Ne parle pas √† l'utilisateur de station m√©teo ou station de vent.

La structure du JSON doit √™tre strictement respect√©e :

<config>
{
  "aircrafts": [
    {
      "type": "PLANE",
      "registration": "F-ABCD",
      "hourlyRate": 150,
      "capacity": 4,
      "status": "AVAILABLE", // AVAILABLE, MAINTENANCE, RESERVED
    }
  ],
  "members": [
    {
      "role": "INSTRUCTOR",// ADMIN, INSTRUCTOR, PILOT, MECHANIC
      "firstName": "Jean",
      "lastName": "Dupont",
      "email": "jean.dupont@exemple.com"
    }
  ]
}
</config>
`;

// Fonction pour formater la r√©ponse de GPT-4
function formatGPTResponse(response) {
  const message = response.choices[0].message;
  const parsedContent = JSON.parse(message.content);
  return {
    content: parsedContent.content,
    role: message.role,
    config: parsedContent.config
  };
}

// Stocker les conversations en cours
const conversations = new Map();
const lastStartTime = new Map();

// Route pour d√©marrer une nouvelle conversation
router.post('/start', verifyToken, async (req, res) => {
  try {
    const userId = req.user.id;
    const now = Date.now();
    const lastStart = lastStartTime.get(userId) || 0;
    
    // Emp√™cher les appels multiples dans un court intervalle (5 secondes)
    if (now - lastStart < 5000) {
      const existingConversation = conversations.get(userId);
      if (existingConversation) {
        const lastMessage = existingConversation.messages[existingConversation.messages.length - 1];
        return res.json(formatGPTResponse({ choices: [{ message: lastMessage }] }));
      }
    }
    
    lastStartTime.set(userId, now);
    console.log('ü§ñ D√©marrage de la conversation GPT-4');
    console.log('üë§ Utilisateur:', JSON.stringify(req.user, null, 2));
    console.log('üì• Donn√©es re√ßues:', JSON.stringify(req.body, null, 2));

    const { clubConfig } = req.body;
    const club = clubConfig.club;

    let stationsInfo = '';
    // Ne r√©cup√©rer les stations que si on a des coordonn√©es GPS
    if (club.coordinates?.browser?.latitude && club.coordinates?.browser?.longitude) {
      const stationsResponse = await fetch(`https://stripe.linked.fr/api/meteo/stations?latitude=${club.coordinates.browser.latitude}&longitude=${club.coordinates.browser.longitude}`);
      const stations = await stationsResponse.json();
      stationsInfo = `<stations>${JSON.stringify(stations.slice(0, 3))}</stations>\n\n`;
    }

    const existingAircrafts = clubConfig.existingData?.aircrafts;
    let existingAircraftsInfo = '';
    
    if (existingAircrafts && existingAircrafts.length > 0) {
      existingAircraftsInfo = 'Voici la flotte existante de votre club :\n';
      existingAircrafts.forEach((plane, index) => {
        existingAircraftsInfo += `- ${plane.registration} (${plane.type}, ${plane.hourlyRate} ‚Ç¨/h)\n`;
      });
      existingAircraftsInfo += '\n';
    }
    
    const initialMessage = `
    Bonjour ! Je vois que nous allons configurer le club "${club.name}" (${club.oaci}). 
    
    ${stationsInfo}
    ${existingAircraftsInfo}
    Je vais maintenant vous aider √† configurer votre club.
    Commen√ßons par la flotte : avez-vous des avions ou des ULM ?
    `;
    

    const messages = [
      { role: 'system', content: systemPrompt },
      { role: 'user', content: initialMessage }
    ];

    const completion = await openai.chat.completions.create({
      model: 'gpt-4o-2024-08-06',
      messages: messages,
      response_format: {
        type: "json_schema",
        json_schema: {
          name: "club_configuration",
          strict: true,
          schema: {
            type: "object",
            properties: {
              content: {
                type: "string",
                description: "The assistant's response message"
              },
              config: {
                type: "object",
                properties: {
                  members: {
                    type: "array",
                    items: {
                      type: "object",
                      properties: {
                        role: {
                          type: "string",
                          enum: ["ADMIN", "INSTRUCTOR", "PILOT", "MECHANIC"]
                        },
                        firstName: {
                          type: "string",
                          description: "Member's first name"
                        },
                        lastName: {
                          type: "string",
                          description: "Member's last name"
                        },
                        email: {
                          type: "string",
                          description: "Member's email address"
                        }
                      },
                      required: ["role", "firstName", "lastName", "email"],
                      additionalProperties: false
                    }
                  },
                  aircrafts: {
                    type: "array",
                    items: {
                      type: "object",
                      properties: {
                        type: {
                          type: "string",
                          enum: ["PLANE", "ULM"]
                        },
                        registration: {
                          type: "string",
                          description: "Aircraft registration number"
                        },
                        hourlyRate: {
                          type: "number",
                          description: "Hourly rate for the aircraft"
                        },
                        capacity: {
                          type: "number",
                          description: "Aircraft capacity"
                        },
                        status: {
                          type: "string",
                          enum: ["AVAILABLE", "MAINTENANCE", "RESERVED"]
                        }
                      },
                      required: ["type", "registration", "hourlyRate", "capacity", "status"],
                      additionalProperties: false
                    }
                  }
                },
                required: ["members", "aircrafts"],
                additionalProperties: false
              }
            },
            required: ["content", "config"],
            additionalProperties: false
          }
        }
      }
    });

    // Handle potential refusals or errors
    if (completion.choices[0].message.refusal) {
      console.log('üö´ GPT-4 refused to respond:', completion.choices[0].message.refusal);
      return res.status(400).json({ error: 'Response refused by AI' });
    }

    if (completion.choices[0].finish_reason === "length") {
      console.log('‚ö†Ô∏è Response was truncated due to length');
      return res.status(400).json({ error: 'Response was incomplete' });
    }

    if (completion.choices[0].finish_reason === "content_filter") {
      console.log('‚ö†Ô∏è Response was filtered for content');
      return res.status(400).json({ error: 'Response was filtered' });
    }

    console.log('üì§ R√©ponse de GPT-4:', JSON.stringify(completion.choices[0].message, null, 2));

    // Cr√©er la configuration initiale avec l'admin
// Cr√©er la configuration initiale avec l'admin et les donn√©es existantes
const initialConfig = {
  members: [{
    role: "ADMIN",
    firstName: club.contact.admin.firstName,
    lastName: club.contact.admin.lastName,
    email: club.contact.admin.email
  }],
  aircrafts: clubConfig.existingData?.aircrafts || []
};

    // Ajouter les coordonn√©es GPS si disponibles
    if (club.coordinates?.browser?.latitude && club.coordinates?.browser?.longitude) {
      initialConfig.coordinates = {
        latitude: club.coordinates.browser.latitude,
        longitude: club.coordinates.browser.longitude
      };
    }

    // Stocker la conversation avec la r√©ponse de GPT-4
    conversations.set(req.user.id, {
      messages: [
        ...messages,
        completion.choices[0].message
      ],
      config: initialConfig,
      step: 'fleet'
    });

    const response = formatGPTResponse(completion);
    
    res.json(response);
  } catch (error) {
    console.error('Erreur lors du d√©marrage de la conversation:', error);
    res.status(500).json({ error: 'Erreur lors du d√©marrage de la conversation' });
  }
});

// Route pour continuer la conversation
router.post('/chat', verifyToken, async (req, res) => {
  try {
    console.log('ü§ñ Continuation de la conversation GPT-4');
    console.log('üë§ Utilisateur:', JSON.stringify(req.user, null, 2));
    console.log('üì• Message re√ßu:', JSON.stringify(req.body, null, 2));

    const userId = req.user.id;
    const { message, clubConfig } = req.body;

    // Pr√©parer le contexte initial avec les donn√©es du club
    let contextMessage = '';
    if (clubConfig?.club) {
      contextMessage = `Configuration en cours pour le club "${clubConfig.club.name}" (${clubConfig.club.oaci}).\n\n`;
    }
    
    // Ajouter les donn√©es existantes
    if (clubConfig?.existingData) {
      const { aircrafts, members } = clubConfig.existingData;
      
      if (aircrafts && aircrafts.length > 0) {
        contextMessage += 'Voici la flotte existante :\n';
        aircrafts.forEach(aircraft => {
          contextMessage += `- ${aircraft.type} ${aircraft.registration} (${aircraft.capacity} places, ${aircraft.hourlyRate}‚Ç¨/h)\n`;
        });
        contextMessage += '\n';
      }
      
      if (members && members.length > 0) {
        contextMessage += 'Voici les membres existants :\n';
        members.forEach(member => {
          contextMessage += `- ${member.firstName} ${member.lastName} (${member.email})\n`;
        });
        contextMessage += '\n';
      }
    }

    // Ajouter les informations de la station m√©t√©o
    if (clubConfig?.weatherStations?.[0]) {
      const station = clubConfig.weatherStations[0];
      contextMessage += `La station m√©t√©o la plus proche est ${station.Nom_usuel} (distance : ${station.distance.toFixed(2)} km).\n\n`;
    }

    // R√©cup√©rer ou cr√©er la conversation
    let conversation = conversations.get(userId);
    if (!conversation) {
      // Initialiser la conversation avec le contexte complet
      conversation = {
        messages: [{
          role: 'system',
          content: `${systemPrompt}\n\nContexte actuel:\n${contextMessage}`
        }, {
          role: 'assistant',
          content: `Bienvenue dans la configuration du club "${clubConfig.club.name}" !\n\n${contextMessage}\nQue souhaitez-vous configurer maintenant ?`
        }],
        config: {
          members: clubConfig.existingData?.members || [],
          aircrafts: clubConfig.existingData?.aircrafts || []
        }
      };
      conversations.set(userId, conversation);
    }

    // Ajouter le message de l'utilisateur s'il existe
    if (message) {
      conversation.messages.push({
        role: 'user',
        content: message
      });

      // Cr√©er la compl√©tion
      const completion = await openai.chat.completions.create({
        model: 'gpt-4o-2024-08-06',
        messages: conversation.messages,
        response_format: {
          type: "json_schema",
          json_schema: {
            name: "club_configuration",
            strict: true,
            schema: {
              type: "object",
              properties: {
                content: {
                  type: "string",
                  description: "The assistant's response message"
                },
                config: {
                  type: "object",
                  properties: {
                    members: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          role: {
                            type: "string",
                            enum: ["ADMIN", "INSTRUCTOR", "PILOT", "MECHANIC"]
                          },
                          firstName: {
                            type: "string",
                            description: "Member's first name"
                          },
                          lastName: {
                            type: "string",
                            description: "Member's last name"
                          },
                          email: {
                            type: "string",
                            description: "Member's email address"
                          }
                        },
                        required: ["role", "firstName", "lastName", "email"],
                        additionalProperties: false
                      }
                    },
                    aircrafts: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          type: {
                            type: "string",
                            enum: ["PLANE", "ULM"]
                          },
                          registration: {
                            type: "string",
                            description: "Aircraft registration number"
                          },
                          hourlyRate: {
                            type: "number",
                            description: "Hourly rate for the aircraft"
                          },
                          capacity: {
                            type: "number",
                            description: "Aircraft capacity"
                          },
                          status: {
                            type: "string",
                            enum: ["AVAILABLE", "MAINTENANCE", "RESERVED"]
                          }
                        },
                        required: ["type", "registration", "hourlyRate", "capacity", "status"],
                        additionalProperties: false
                      }
                    }
                  },
                  required: ["members", "aircrafts"],
                  additionalProperties: false
                }
              },
              required: ["content", "config"],
              additionalProperties: false
            }
          }
        }
      });

      // Handle potential refusals or errors
      if (completion.choices[0].message.refusal) {
        console.log('üö´ GPT-4 refused to respond:', completion.choices[0].message.refusal);
        return res.status(400).json({ error: 'Response refused by AI' });
      }

      if (completion.choices[0].finish_reason === "length") {
        console.log('‚ö†Ô∏è Response was truncated due to length');
        return res.status(400).json({ error: 'Response was incomplete' });
      }

      if (completion.choices[0].finish_reason === "content_filter") {
        console.log('‚ö†Ô∏è Response was filtered for content');
        return res.status(400).json({ error: 'Response was filtered' });
      }

      // Ajouter la r√©ponse √† l'historique
      conversation.messages.push(completion.choices[0].message);
      
      // Mettre √† jour la conversation
      conversations.set(userId, conversation);

      // Envoyer la r√©ponse
      res.json(formatGPTResponse(completion));
    } else {
      // Si pas de message, envoyer le dernier message assistant
      res.json({
        role: 'assistant',
        content: conversation.messages[conversation.messages.length - 1].content
      });
    }
  } catch (error) {
    console.error('Erreur lors de la conversation:', error);
    res.status(500).json({ error: 'Erreur lors de la conversation' });
  }
});

// Fonction pour extraire la configuration des r√©ponses
function extractConfig(message) {
  const configMatch = message.match(/<config>(.*?)<\/config>/s);
  if (configMatch) {
    try {
      return JSON.parse(configMatch[1]);
    } catch (error) {
      console.error('Erreur lors du parsing de la configuration:', error);
      return null;
    }
  }
  return null;
}

// V√©rifier si la configuration est compl√®te
function checkConfigComplete(config) {
  // V√©rifier si l'objet config existe
  if (!config) return false;

  // Liste des champs requis
  const requiredFields = ['members', 'aircrafts'];
  
  // V√©rifier la pr√©sence de tous les champs requis
  const hasAllFields = requiredFields.every(field => config.hasOwnProperty(field));
  if (!hasAllFields) return false;
  
  // V√©rifier que les tableaux ne sont pas vides
  if (!config.members.length || !config.aircrafts.length) return false;
  
  // V√©rifier la pr√©sence d'au moins un admin et un autre membre
  const hasAdmin = config.members.some(member => member.role === 'ADMIN');
  const hasOtherMember = config.members.some(member => member.role !== 'ADMIN');
  if (!hasAdmin || !hasOtherMember) return false;

  return true;
}

module.exports = router;
}
