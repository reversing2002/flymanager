const express = require('express');
const router = express.Router();
const OpenAI = require('openai');
const claudeRouter = require('./claude');
const { verifyToken } = require('./middleware/auth');

// V√©rifier quelle API utiliser
if (!process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY.length === 0) {
  console.log('ü§ñ Cl√© OpenAI non trouv√©e, utilisation de Claude comme fallback');
  module.exports = claudeRouter;
} else {
  console.log('ü§ñ Utilisation de GPT-4 pour l\'assistant');
  
  // Initialiser le client OpenAI avec la cl√© API
  const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
  });

// Configuration du syst√®me pour GPT-4
const systemPrompt = `
Tu es un assistant sp√©cialis√© dans la configuration de clubs a√©riens sur la plateforme 4fly.
Ton r√¥le est de guider l'utilisateur pour configurer son club de la fa√ßon la plus simple possible, 
en posant des questions pertinentes et en r√©cup√©rant les informations essentielles.

Au d√©marrage de la conversation, tu recevras la liste des stations m√©t√©o disponibles entre les balises <stations></stations>.
Tu dois utiliser ces informations pour proposer automatiquement la station m√©t√©o la plus proche du club,
en te basant sur les coordonn√©es GPS fournies.

Tu disposes deja des informations concernant le club et l'admin avec qui tu discutes.
ne demande pas d'information sur les administrateurs.

Voici les informations qu'il te reste √† collecter :

1. FLOTTE
   - Types d'appareils (PLANE ou ULM uniquement)
   - Immatriculations
   - Tarifs horaires
   - Capacit√©s (optionnel)
   - Maintenance (optionnel)

2. MEMBRES
   - Administrateurs
   - Instructeurs
   - Pilotes r√©guliers
   Pour chacun : pr√©nom, nom, email, r√¥le (INSTRUCTOR, PILOT, etc.)


Ton objectif est de poser une question √† la fois et de t‚Äôassurer de collecter toutes les informations
de mani√®re progressive. Sois amical et professionnel.

Ne montre jamais √† l‚Äôutilisateur le JSON de configuration, ne lui parle jamais de ¬´ configuration ¬ª.  
Tu discutes avec lui comme un conseiller qui l‚Äôaide √† configurer son club.  
N‚Äô√©voque pas ton fonctionnement interne.  

Ins√®re systematiquement un bloc JSON contenant toutes les donn√©es structur√©es √† la fin de ton message, 
entre les balises <config> et </config>. Ne place jamais ce bloc au milieu de ta r√©ponse.  

Si une information est manquante, redemande-la.  
Si l‚Äôinformation a d√©j√† √©t√© fournie, ne la redemande pas.  
Pour le type PLANE ou ULM demande en fran√ßais si ce sont des avions ou ulm, pr√©voit 4 places par defaut dans les avions et 2 places dans les ulm.

Ne change pas de sujet : tu es uniquement l√† pour configurer un club a√©rien.  
Pose les questions n√©cessaires et guide l‚Äôutilisateur jusqu‚Äô√† ce que la configuration soit compl√®te.

La structure du JSON doit √™tre strictement respect√©e :

<config>
{
  "aircrafts": [
    {
      "type": "PLANE",
      "registration": "F-ABCD",
      "hourlyRate": 150,
      "capacity": 4,
      "status": "AVAILABLE", // AVAILABLE, MAINTENANCE, RESERVED
    }
  ],
  "members": [
    {
      "role": "INSTRUCTOR",// ADMIN, INSTRUCTOR, PILOT, MECHANIC
      "firstName": "Jean",
      "lastName": "Dupont",
      "email": "jean.dupont@exemple.com"
    }
  ]
}
</config>
`;

// Fonction pour formater la r√©ponse de GPT-4
function formatGPTResponse(response) {
  return {
    content: response.choices[0].message.content,
    role: response.choices[0].message.role,
  };
}

// Stocker les conversations en cours
const conversations = new Map();
const lastStartTime = new Map();

// Route pour d√©marrer une nouvelle conversation
router.post('/start', verifyToken, async (req, res) => {
  try {
    const userId = req.user.id;
    const now = Date.now();
    const lastStart = lastStartTime.get(userId) || 0;
    
    // Emp√™cher les appels multiples dans un court intervalle (5 secondes)
    if (now - lastStart < 5000) {
      const existingConversation = conversations.get(userId);
      if (existingConversation) {
        const lastMessage = existingConversation.messages[existingConversation.messages.length - 1];
        return res.json(formatGPTResponse({ choices: [{ message: lastMessage }] }));
      }
    }
    
    lastStartTime.set(userId, now);
    console.log('ü§ñ D√©marrage de la conversation GPT-4');
    console.log('üë§ Utilisateur:', JSON.stringify(req.user, null, 2));
    console.log('üì• Donn√©es re√ßues:', JSON.stringify(req.body, null, 2));

    const { clubConfig } = req.body;
    const club = clubConfig.club;

    let stationsInfo = '';
    // Ne r√©cup√©rer les stations que si on a des coordonn√©es GPS
    if (club.coordinates?.browser?.latitude && club.coordinates?.browser?.longitude) {
      const stationsResponse = await fetch(`https://stripe.linked.fr/api/meteo/stations?latitude=${club.coordinates.browser.latitude}&longitude=${club.coordinates.browser.longitude}`);
      const stations = await stationsResponse.json();
      stationsInfo = `<stations>${JSON.stringify(stations.slice(0, 3))}</stations>\n\n`;
    }

    // Cr√©er le message initial avec les informations du club et des stations m√©t√©o
    const initialMessage = `Bonjour ! Je vois que nous allons configurer le club "${club.name}" (${club.oaci}). 

    ${stationsInfo}Je vais maintenant vous aider √† configurer votre club.
    Commen√ßons par la flotte : avez-vous des avions ou des ULM ?`;

    const messages = [
      { role: 'system', content: systemPrompt },
      { role: 'user', content: initialMessage }
    ];

    const completion = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: messages
    });

    console.log('üì§ R√©ponse de GPT-4:', JSON.stringify(completion.choices[0].message, null, 2));

    // Cr√©er la configuration initiale avec l'admin
    const initialConfig = {
      members: [{
        role: "ADMIN",
        firstName: club.contact.admin.firstName,
        lastName: club.contact.admin.lastName,
        email: club.contact.admin.email
      }]
    };

    // Ajouter les coordonn√©es GPS si disponibles
    if (club.coordinates?.browser?.latitude && club.coordinates?.browser?.longitude) {
      initialConfig.coordinates = {
        latitude: club.coordinates.browser.latitude,
        longitude: club.coordinates.browser.longitude
      };
    }

    // Stocker la conversation avec la r√©ponse de GPT-4
    conversations.set(req.user.id, {
      messages: [
        ...messages,
        completion.choices[0].message
      ],
      config: initialConfig,
      step: 'fleet'
    });

    const response = formatGPTResponse(completion);
    
    // Ajouter la configuration initiale √† la r√©ponse
    response.config = initialConfig;
    
    // Si des stations ont √©t√© r√©cup√©r√©es, les ajouter √† la config
    if (stationsInfo) {
      try {
        const stations = JSON.parse(stationsInfo.match(/<stations>(.*?)<\/stations>/s)[1]);
        if (stations && stations.length > 0) {
          response.config.weatherStation = stations[0];
        }
      } catch (error) {
        console.error('Erreur lors du parsing des stations:', error);
      }
    }
    
    // Extraire la configuration si pr√©sente
    const config = extractConfig(response.content);
    if (config) {
      response.config = config;
      response.configComplete = checkConfigComplete(config);
    }
    
    res.json(response);
  } catch (error) {
    console.error('Erreur lors du d√©marrage de la conversation:', error);
    res.status(500).json({ error: 'Erreur lors du d√©marrage de la conversation' });
  }
});

// Route pour continuer la conversation
router.post('/chat', verifyToken, async (req, res) => {
  try {
    console.log('ü§ñ Continuation de la conversation GPT-4');
    console.log('üë§ Utilisateur:', JSON.stringify(req.user, null, 2));
    console.log('üì• Message re√ßu:', JSON.stringify(req.body, null, 2));

    const userId = req.user.id;
    const userMessage = req.body.message;

    // R√©cup√©rer la conversation existante
    const conversation = conversations.get(userId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation non trouv√©e' });
    }

    // Ajouter le message de l'utilisateur √† l'historique
    conversation.messages.push({
      role: 'user',
      content: userMessage
    });

    const completion = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: conversation.messages
  
    });

    console.log('üì§ R√©ponse de GPT-4:', JSON.stringify(completion.choices[0].message, null, 2));

    // Ajouter la r√©ponse √† l'historique
    conversation.messages.push(completion.choices[0].message);

    // Mettre √† jour la conversation dans le Map
    conversations.set(userId, conversation);

    // Extraire la configuration si pr√©sente
    const response = formatGPTResponse(completion);
    const config = extractConfig(response.content);

    if (config) {
      // Fusionner la nouvelle config avec la config existante
      conversation.config = {
        ...conversation.config,  // Pr√©serve les coordonn√©es GPS et la station m√©t√©o
        ...config,              // Ajoute les nouvelles informations
        members: [
          ...conversation.config.members,  // Pr√©serve les membres existants
          ...(config.members || [])        // Ajoute les nouveaux membres s'il y en a
        ]
      };
      response.config = conversation.config;
      response.configComplete = checkConfigComplete(conversation.config);
    }

    res.json(response);
  } catch (error) {
    console.error('Erreur lors de la conversation:', error);
    res.status(500).json({ error: 'Erreur lors de la conversation' });
  }
});

// Fonction pour extraire la configuration des r√©ponses
function extractConfig(message) {
  const configMatch = message.match(/<config>(.*?)<\/config>/s);
  if (configMatch) {
    try {
      return JSON.parse(configMatch[1]);
    } catch (error) {
      console.error('Erreur lors du parsing de la configuration:', error);
      return null;
    }
  }
  return null;
}

// V√©rifier si la configuration est compl√®te
function checkConfigComplete(config) {
  // V√©rifier si l'objet config existe
  if (!config) return false;

  // Liste des champs requis
  const requiredFields = ['members', 'aircrafts'];
  
  // V√©rifier la pr√©sence de tous les champs requis
  const hasAllFields = requiredFields.every(field => config.hasOwnProperty(field));
  if (!hasAllFields) return false;
  
  // V√©rifier que les tableaux ne sont pas vides
  if (!config.members.length || !config.aircrafts.length) return false;
  
  // V√©rifier la pr√©sence d'au moins un admin et un autre membre
  const hasAdmin = config.members.some(member => member.role === 'ADMIN');
  const hasOtherMember = config.members.some(member => member.role !== 'ADMIN');
  if (!hasAdmin || !hasOtherMember) return false;

  return true;
}

module.exports = router;
}
