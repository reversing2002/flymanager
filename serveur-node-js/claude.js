const express = require('express');
const router = express.Router();
const Anthropic = require('@anthropic-ai/sdk');
const openaiRouter = require('./openai');
const { verifyToken } = require('./middleware/auth');

// V√©rifier quelle API utiliser
const useOpenAI = process.env.OPENAI_API_KEY && process.env.OPENAI_API_KEY.length > 0;

if (useOpenAI) {
  console.log('ü§ñ Utilisation de GPT-4 pour l\'assistant');
  module.exports = openaiRouter;
} else {
  console.log('ü§ñ Utilisation de Claude pour l\'assistant');
  
  // Initialiser le client Anthropic avec la cl√© API
  const anthropic = new Anthropic({
    apiKey: process.env.ANTHROPIC_API_KEY,
  });

// Configuration du syst√®me pour Claude
const systemPrompt = `
Tu es un assistant sp√©cialis√© dans la configuration de clubs a√©riens sur la plateforme 4fly.
Ton r√¥le est de guider l'utilisateur pour configurer son club de la fa√ßon la plus simple possible, 
en posant des questions pertinentes et en r√©cup√©rant les informations essentielles.

Au d√©marrage de la conversation, tu recevras la liste des stations m√©t√©o disponibles entre les balises <stations></stations>.
Tu dois utiliser ces informations pour proposer automatiquement la station m√©t√©o la plus proche du club,
en te basant sur les coordonn√©es GPS fournies.

Voici les informations que tu dois collecter :

1. FLOTTE
   - Types d'appareils (PLANE ou ULM uniquement)
   - Immatriculations
   - Tarifs horaires
   - Capacit√©s (optionnel)
   - Maintenance (optionnel)

2. MEMBRES
   - Administrateurs
   - Instructeurs
   - Pilotes r√©guliers
   Pour chacun : pr√©nom, nom, email, r√¥le (ADMIN, INSTRUCTOR, PILOT)

3. PARAM√àTRES
   - D√©lai maximal de r√©servation √† l'avance (jours)
   - Dur√©e maximale de r√©servation (heures)
   - Autorisation des r√©servations overnight
   - Validation instructeur requise
   - Devise par d√©faut

Ton objectif est de poser une question √† la fois et de t‚Äôassurer de collecter toutes les informations
de mani√®re progressive. Sois amical et professionnel.

Ne montre jamais √† l‚Äôutilisateur le JSON de configuration, ne lui parle jamais de ¬´ configuration ¬ª.  
Tu discutes avec lui comme un conseiller qui l‚Äôaide √† configurer son club.  
N‚Äô√©voque pas ton fonctionnement interne.  

D√®s qu‚Äôune r√©ponse inclut des donn√©es structur√©es, ins√®re un bloc JSON uniquement √† la fin de ton message, 
entre les balises <config> et </config>. Ne place jamais ce bloc au milieu de ta r√©ponse.  

Si une information est manquante, redemande-la.  
Si l‚Äôinformation a d√©j√† √©t√© fournie, ne la redemande pas.  
Pour le type PLANE ou ULM demande en fran√ßais si ce sont des avions ou ulm, pr√©voit 4 places par defaut dans les avions et 2 places dans les ulm.

Ne change pas de sujet : tu es uniquement l√† pour configurer un club a√©rien.  
Pose les questions n√©cessaires et guide l‚Äôutilisateur jusqu‚Äô√† ce que la configuration soit compl√®te.

La structure du JSON doit √™tre strictement respect√©e :

<config>
{
  "aircrafts": [
    {
      "type": "PLANE",
      "registration": "F-ABCD",
      "hourlyRate": 150,
      "capacity": 4,
      "status": "AVAILABLE", // AVAILABLE, MAINTENANCE, RESERVED
    }
  ],
  "members": [
    {
      "role": "INSTRUCTOR",// ADMIN, INSTRUCTOR, PILOT, MECHANIC
      "firstName": "Jean",
      "lastName": "Dupont",
      "email": "jean.dupont@exemple.com"
    }
  ]
}
</config>
`;

// Stocker les conversations en cours
const conversations = new Map();

// Route pour d√©marrer une nouvelle conversation
router.post('/start', verifyToken, async (req, res) => {
  try {
    console.log('ü§ñ D√©marrage d\'une nouvelle conversation Claude');
    console.log('üë§ Utilisateur:', req.user);
    console.log('üìã Configuration du club:', req.body.clubConfig);

    const { clubConfig } = req.body;
    const club = clubConfig.club;

    // R√©cup√©rer la liste des stations m√©t√©o
    const stationsResponse = await fetch('https://stripe.linked.fr/api/meteo/stations');
    const stations = await stationsResponse.json();
    
    // Cr√©er le message initial avec les informations du club et des stations m√©t√©o
    const initialMessage = `Bonjour ! Je vois que nous allons configurer le club "${club.name}" (${club.oaci}). 
    L'administrateur principal est ${club.contact.admin.firstName} ${club.contact.admin.lastName}.

    Voici ce que je sais sur votre club :
    - Localisation : ${club.address}
    - Contact : ${club.contact.admin.email}
    - Configuration actuelle :
      * ${club.settings.nightFlightsEnabled ? '‚úÖ' : '‚ùå'} Vols de nuit autoris√©s
      * Commission : ${club.settings.commissionRate}%
      * Station m√©t√©o : ${club.settings.weatherStation.name || 'Non configur√©e'}

    <stations>${JSON.stringify(stations)}</stations>
`;

    const message = await anthropic.messages.create({
      model: 'claude-3-opus-20240229',
      max_tokens: 1024,
      messages: [{
        role: 'user',
        content: initialMessage
      }],
      system: systemPrompt
    });

    console.log('üì• R√©ponse re√ßue de Claude:', message);

    // Stocker la conversation
    conversations.set(req.user.id, {
      messages: [{
        role: 'user',
        content: initialMessage
      }],
      config: {
        members: [{
          id: club.contact.admin.id || 'admin',
          email: club.contact.admin.email,
          first_name: club.contact.admin.firstName,
          last_name: club.contact.admin.lastName,
          role: 'ADMIN',
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        }]
      },
      step: 'fleet'
    });

    console.log('üíæ Conversation stock√©e pour l\'utilisateur:', req.user.id);

    // Check if message has content before accessing it
    const content = message.content && message.content.length > 0 
      ? message.content[0].text 
      : message.messages && message.messages.length > 0 
        ? message.messages[0].content 
        : '';

    res.json({
      messageId: message.id,
      content: content
    });

  } catch (error) {
    console.error('‚ùå Erreur lors du d√©marrage de la conversation:', error);
    console.error('Stack trace:', error.stack);
    res.status(500).json({ 
      error: 'Erreur lors du d√©marrage de la conversation',
      details: error.message 
    });
  }
});

// Fonction pour formater la r√©ponse de Claude
function formatClaudeResponse(response) {
  return {
    content: response.content[0].text,
    role: response.role || 'assistant'
  };
}

// Route pour continuer la conversation
router.post('/chat', verifyToken, async (req, res) => {
  try {
    console.log('ü§ñ Continuation de la conversation Claude');
    console.log('üë§ Utilisateur:', req.user);
    
    const userId = req.user.id;
    console.log('üîë ID Utilisateur:', userId);
    
    const { message: userMessage } = req.body;

    // R√©cup√©rer la conversation existante
    const conversation = conversations.get(userId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation non trouv√©e' });
    }

    console.log('üí¨ Message de l\'utilisateur:', userMessage);

    // Ajouter le message de l'utilisateur
    conversation.messages.push({
      role: 'user',
      content: userMessage
    });

    // Analyser le message avec Claude
    console.log('üì§ Envoi du message √† Claude...');
    const completion = await anthropic.messages.create({
      model: 'claude-3-opus-20240229',
      max_tokens: 1024,
      temperature: 0.7,
      system: systemPrompt,
      messages: conversation.messages
    });

    console.log('üì• R√©ponse re√ßue de Claude:', completion);

    // Formater la r√©ponse
    const response = formatClaudeResponse(completion);

    // Ajouter la r√©ponse √† l'historique
    conversation.messages.push({
      role: 'assistant',
      content: response.content
    });

    // Extraire la configuration si pr√©sente
    const config = extractConfig(response.content);
    if (config) {
      // Fusionner la nouvelle config avec la config existante
      conversation.config = {
        ...conversation.config,  // Pr√©serve les coordonn√©es GPS et la station m√©t√©o
        ...config,              // Ajoute les nouvelles informations
        members: [
          ...(conversation.config.members || []),  // Pr√©serve les membres existants
          ...(config.members || [])               // Ajoute les nouveaux membres s'il y en a
        ]
      };
    }

    // V√©rifier si la configuration est compl√®te
    const configComplete = checkConfigComplete(conversation.config);

    // Mettre √† jour la conversation dans le Map
    conversations.set(userId, conversation);

    res.json({
      ...response,
      config: conversation.config,
      configComplete
    });

  } catch (error) {
    console.error('‚ùå Erreur lors de la conversation:', error);
    console.error('Stack trace:', error.stack);
    res.status(500).json({ 
      error: 'Erreur lors de la conversation',
      details: error.message 
    });
  }
});

// Route pour r√©cup√©rer la configuration finale
router.get('/config', verifyToken, (req, res) => {
  const userId = req.user.id;
  const conversation = conversations.get(userId);
  
  if (!conversation) {
    return res.status(404).json({ error: 'Configuration non trouv√©e' });
  }

  console.log('üíæ Configuration finale pour l\'utilisateur:', userId);
  res.json({ config: conversation.config });
});

// Fonction pour extraire la configuration des r√©ponses
function extractConfig(message) {
  try {
    console.log('üîç Extraction de la configuration...');
    // Chercher le contenu entre les balises <config></config>
    const configMatch = message.match(/<config>([\s\S]*?)<\/config>/);
    if (configMatch && configMatch[1]) {
      const config = JSON.parse(configMatch[1]);
      console.log('üí° Configuration extraite:', config);
      return config;
    }
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'extraction de la configuration:', error);
  }
  return null;
}

// V√©rifier si la configuration est compl√®te
function checkConfigComplete(config) {
  console.log('üîç V√©rification de la compl√©tude de la configuration...');
  const requiredSections = ['aircraft', 'members', 'settings'];
  return requiredSections.every(section => {
    if (!config[section]) return false;
    if (Array.isArray(config[section])) {
      return config[section].length > 0;
    }
    return Object.keys(config[section]).length > 0;
  });
}

module.exports = router;
}
